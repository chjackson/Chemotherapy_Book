qnorm(0.99)
qnorm(0.995)
qnorm(0.995) * 0.5^2 / 0.005^2
qnorm(0.995) * 0.8*0.2 / 0.005^2
qnorm(0.975) * 0.8*0.2 / 0.005^2
qnorm(0.975) * 0.8*0.2 / 0.05^2
qnorm(0.975) * 0.8*0.2 / 0.01^2
qnorm(0.975) * 0.5*0.5 / 0.01^2
qnorm(0.995) * 0.5*0.5 / 0.01^2
qnorm(0.995) * 0.5*0.5 / 0.05^2
qnorm(0.975) * 0.5*0.5 / 0.05^2
qnorm(0.975) * 0.5*0.5 / 0.005^2
qnorm(0.975) * 0.8*0.3 / 0.005^2
qnorm(0.975) * 0.8*0.2 / 0.005^2
qnorm(0.975) * 0.9*0.1 / 0.005^2
### Packages
library(colorspace)
### Run the Model
source("04_analysis/01_model_run.R")
##########################################################
### Model Code for model published in Brennan and     ####
### Kharroubi and modified by Menzies included in the ####
### paper "Estimating the Expected Value of Sample    ####
### Information across Different Sample Sizes using   ####
### Moment Matching and Non-Linear Regression"        ####
###                                                   ####
### Modified for use within the EVSI package.         ####
### Copyright: Anna Heath 2018                        ####
##########################################################
set.seed(123)
## Uncertainty Analysis Simulation Size
n.sim <- 10000
## Simulate Uncertainty Analysis Distributions
theta <- array(NA, dim = c(n.sim, 19))
theta[,1] <- rnorm(n.sim, 10000, 10)
theta[,11] <- rnorm(n.sim, 15000, 10)
theta[,2] <- rnorm(n.sim, 0.1, 0.02)
theta[,12] <- rnorm(n.sim, 0.08, 0.02)
theta[,3] <- rnorm(n.sim, 5.2, 1)
theta[,13] <- rnorm(n.sim, 6.1, 1)
theta[,4] <- rnorm(n.sim, 4000, 2000)
theta[,8] <- rnorm(n.sim, 0.25, 0.1)
theta[,17] <- rnorm(n.sim, 0.2, 0.05)
theta[,9] <- rnorm(n.sim, -0.1, 0.02)
theta[,18] <- rnorm(n.sim, -0.1, 0.02)
theta[,10] <- rnorm(n.sim, 0.5, 0.2)
theta[,19] <- rnorm(n.sim, 0.5, 0.2)
#Precision Matrices
#The original model worked with standard errors so first
#specify all the standard errors
sd.5<-0.1
sd.6<-0.1
sd.7<-0.5
sd.14<-0.1
sd.15<-0.05
sd.16<-1
rho<-0.6
#Start by defining variance matrix using the matrix command
S.1<-matrix(
#Vector containing all the values to enter into the matrix
c(sd.5^2,rho*sd.14*sd.5,rho*sd.5*sd.7,rho*sd.5*sd.16,
rho*sd.5*sd.14,sd.14^2,rho*sd.14*sd.7,rho*sd.14*sd.16,
rho*sd.5*sd.7,sd.14*rho*sd.7,sd.7^2,rho*sd.16*sd.7,
rho*sd.5*sd.16,sd.14*rho*sd.16,rho*sd.7*sd.16,sd.16^2),
#Specify the size of the matrix
nrow=4)
S.2<-matrix(
#Vector containing all the values to enter into the matrix
c(sd.6^2,rho*sd.6*sd.15,
rho*sd.6*sd.15,sd.15^2),
#Specify the size of the matrix
nrow=2)
library(MASS)
theta[,c(5,7,14,16)] <- mvrnorm(n.sim, c(0.7,0.8,3,3), S.1)
theta[,c(6,15)] <- mvrnorm(n.sim, c(0.3,0.3), S.2)
## Calculate Costs and Effects
# This is a decision tree model so the effects are in the sum/product form.
e.treatment1<-(theta[,5]*theta[,6]*theta[,7])+(theta[,8]*theta[,9]*theta[,10])
e.treatment2<-(theta[,14]*theta[,15]*theta[,16])+(theta[,17]*theta[,18]*theta[,19])
c.treatment1<-(theta[,1]+theta[,2]*theta[,3]*theta[,4])
c.treatment2<-(theta[,11]+theta[,12]*theta[,13]*theta[,4])
## Willingness-to-pay
WTP <- 100000
## Calculate EVPI
## As a matrix
NB <- cbind(WTP*e.treatment1-c.treatment1,
WTP*e.treatment2-c.treatment2)
mean(apply(NB, 1, max)) - max(apply(NB, 2, mean))
## As vectors
NB1 <- WTP*e.treatment1-c.treatment1
NB2 <- WTP*e.treatment2-c.treatment2
mean(pmax(NB1, NB2)) - max(mean(NB1), mean(NB2))
## Plotting
WTP.vec <- seq(0, 200000, length.out = 501)
EVPI <- vector("numeric", 501)
n <- 1
for(W in WTP.vec){
NB1.vec <- W*e.treatment1-c.treatment1
NB2.vec <- W*e.treatment2-c.treatment2
EVPI[n] <- mean(pmax(NB1.vec, NB2.vec)) -
max(mean(NB1.vec), mean(NB2.vec))
n <- n + 1
}
## Plot
plot(WTP.vec, EVPI, type = "l",
xlab = "Willingness-to-pay",
ylab = "Expected Value of Perfect Information")
## Calculate EVPPI
# The following code performs non-parametric model fitting using the mgcv package
library(mgcv)
model.mgcv.example <- gam(e.treatment1 ~ s(theta[,1]))
# This code has a similar structure to the lm command in R for linear modelling
# The function gam fits a generalised additive model, a popular form of non-parametric
# regression that uses splines to estimate the function of interest.
# In this case, we are fitting a smooth function of theta[,1]. s(.) is a model
# specification that fits a univariate smooth function using thin-plate
# regression splines.
model.mgcv.example.bivariate <- gam(e.treatment1 ~ te(theta[,1],theta[,11]))
# This code fits a multivariate cubic spline. It is recommended when calculating
# EVPPI of more than one model parameters. It uses the tensor product to
# include interaction terms between the model parameters (like an interaction)
# term in a linear model.
# Based on these commands, calculate EVPPI as in the practical.
## Easier to work with INB
INB <- NB2 - NB1
## Calculate the regression
model.mgcv.example.bivariate <- gam(INB ~ te(theta[,6],theta[,7],
theta[,15],theta[,16]))
model.mgcv.example.bivariate <- gam(INB ~ te(theta[,6]))
model.mgcv.example.bivariate <- gam(INB ~ te(theta[,5], theta[, 14]))
## Extract the fitted values
fits <- model.mgcv.example.bivariate$fitted.values
## Compare with 0.
mean(pmax(0,fits))- max(mean(fits),0)
## Plotting over WTP?
Ie <- e.treatment2 - e.treatment1
Ic <- c.treatment2 - c.treatment1
model.e <- gam(Ie ~ te(theta[,6],theta[,7]))
fit.e <- model.e$fitted.values
model.c <- gam(Ic ~ te(theta[,6],theta[,7]))
fit.c<- model.c$fitted.values
EVPPI <- vector("numeric", 501)
n <- 1
for(W in WTP.vec){
fit.wtp <- W*fit.e-fit.c
EVPPI[n] <- mean(pmax(0,fit.wtp))- max(mean(fit.wtp),0)
n <- n + 1
}
## Plot
plot(WTP.vec, EVPI, type = "l",
xlab = "Willingness-to-pay",
ylab = "Expected Value of Perfect Information")
points(WTP.vec, EVPPI, type = "l", ,lty = 2)
##########################################################
set.seed(123)
## Uncertainty Analysis Simulation Size
n.sim <- 10000
## Simulate Uncertainty Analysis Distributions
theta <- array(NA, dim = c(n.sim, 19))
theta[,1] <- rnorm(n.sim, 10000, 10)
theta[,11] <- rnorm(n.sim, 15000, 10)
theta[,2] <- rnorm(n.sim, 0.1, 0.02)
theta[,12] <- rnorm(n.sim, 0.08, 0.02)
theta[,3] <- rnorm(n.sim, 5.2, 1)
theta[,13] <- rnorm(n.sim, 6.1, 1)
theta[,4] <- rnorm(n.sim, 4000, 2000)
theta[,8] <- rnorm(n.sim, 0.25, 0.1)
theta[,17] <- rnorm(n.sim, 0.2, 0.05)
theta[,9] <- rnorm(n.sim, -0.1, 0.02)
theta[,18] <- rnorm(n.sim, -0.1, 0.02)
theta[,10] <- rnorm(n.sim, 0.5, 0.2)
theta[,19] <- rnorm(n.sim, 0.5, 0.2)
#Precision Matrices
#The original model worked with standard errors so first
#specify all the standard errors
sd.5<-0.1
sd.6<-0.1
sd.7<-0.5
sd.14<-0.1
sd.15<-0.05
sd.16<-1
rho<-0.6
#Start by defining variance matrix using the matrix command
S.1<-matrix(
#Vector containing all the values to enter into the matrix
c(sd.5^2,rho*sd.14*sd.5,rho*sd.5*sd.7,rho*sd.5*sd.16,
rho*sd.5*sd.14,sd.14^2,rho*sd.14*sd.7,rho*sd.14*sd.16,
rho*sd.5*sd.7,sd.14*rho*sd.7,sd.7^2,rho*sd.16*sd.7,
rho*sd.5*sd.16,sd.14*rho*sd.16,rho*sd.7*sd.16,sd.16^2),
#Specify the size of the matrix
nrow=4)
S.2<-matrix(
#Vector containing all the values to enter into the matrix
c(sd.6^2,rho*sd.6*sd.15,
rho*sd.6*sd.15,sd.15^2),
#Specify the size of the matrix
nrow=2)
library(MASS)
theta[,c(5,7,14,16)] <- mvrnorm(n.sim, c(0.7,3,0.8,3), S.1)
theta[,c(6,15)] <- mvrnorm(n.sim, c(0.3,0.3), S.2)
## Calculate Costs and Effects
# This is a decision tree model so the effects are in the sum/product form.
e.treatment1<-(theta[,5]*theta[,6]*theta[,7])+(theta[,8]*theta[,9]*theta[,10])
e.treatment2<-(theta[,14]*theta[,15]*theta[,16])+(theta[,17]*theta[,18]*theta[,19])
c.treatment1<-(theta[,1]+theta[,2]*theta[,3]*theta[,4])
c.treatment2<-(theta[,11]+theta[,12]*theta[,13]*theta[,4])
## Willingness-to-pay
WTP <- 100000
## Calculate EVPI
## As a matrix
NB <- cbind(WTP*e.treatment1-c.treatment1,
WTP*e.treatment2-c.treatment2)
mean(apply(NB, 1, max)) - max(apply(NB, 2, mean))
##########################################################
### Model Code for model published in Brennan and     ####
### Kharroubi and modified by Menzies included in the ####
### paper "Estimating the Expected Value of Sample    ####
### Information across Different Sample Sizes using   ####
### Moment Matching and Non-Linear Regression"        ####
###                                                   ####
### Modified for use within the EVSI package.         ####
### Copyright: Anna Heath 2018                        ####
##########################################################
set.seed(123)
## Uncertainty Analysis Simulation Size
n.sim <- 10000
## Simulate Uncertainty Analysis Distributions
theta <- array(NA, dim = c(n.sim, 19))
theta[,1] <- rnorm(n.sim, 10000, 10)
theta[,11] <- rnorm(n.sim, 15000, 10)
theta[,2] <- rnorm(n.sim, 0.1, 0.02)
theta[,12] <- rnorm(n.sim, 0.08, 0.02)
theta[,3] <- rnorm(n.sim, 5.2, 1)
theta[,13] <- rnorm(n.sim, 6.1, 1)
theta[,4] <- rnorm(n.sim, 4000, 2000)
theta[,8] <- rnorm(n.sim, 0.25, 0.1)
theta[,17] <- rnorm(n.sim, 0.2, 0.05)
theta[,9] <- rnorm(n.sim, -0.1, 0.02)
theta[,18] <- rnorm(n.sim, -0.1, 0.02)
theta[,10] <- rnorm(n.sim, 0.5, 0.2)
theta[,19] <- rnorm(n.sim, 0.5, 0.2)
#Precision Matrices
#The original model worked with standard errors so first
#specify all the standard errors
sd.5<-0.1
sd.6<-0.1
sd.7<-0.5
sd.14<-0.1
sd.15<-0.05
sd.16<-1
rho<-0.6
#Start by defining variance matrix using the matrix command
S.1<-matrix(
#Vector containing all the values to enter into the matrix
c(sd.5^2,rho*sd.14*sd.5,rho*sd.5*sd.7,rho*sd.5*sd.16,
rho*sd.5*sd.14,sd.14^2,rho*sd.14*sd.7,rho*sd.14*sd.16,
rho*sd.5*sd.7,sd.14*rho*sd.7,sd.7^2,rho*sd.16*sd.7,
rho*sd.5*sd.16,sd.14*rho*sd.16,rho*sd.7*sd.16,sd.16^2),
#Specify the size of the matrix
nrow=4)
S.2<-matrix(
#Vector containing all the values to enter into the matrix
c(sd.6^2,rho*sd.6*sd.15,
rho*sd.6*sd.15,sd.15^2),
#Specify the size of the matrix
nrow=2)
library(MASS)
theta[,c(5,14,7,16)] <- mvrnorm(n.sim, c(0.7, 0.8, 3, 3), S.1)
theta[,c(6,15)] <- mvrnorm(n.sim, c(0.3,0.3), S.2)
## Calculate Costs and Effects
# This is a decision tree model so the effects are in the sum/product form.
e.treatment1<-(theta[,5]*theta[,6]*theta[,7])+(theta[,8]*theta[,9]*theta[,10])
e.treatment2<-(theta[,14]*theta[,15]*theta[,16])+(theta[,17]*theta[,18]*theta[,19])
c.treatment1<-(theta[,1]+theta[,2]*theta[,3]*theta[,4])
c.treatment2<-(theta[,11]+theta[,12]*theta[,13]*theta[,4])
## Willingness-to-pay
WTP <- 100000
## Calculate EVPI
## As a matrix
NB <- cbind(WTP*e.treatment1-c.treatment1,
WTP*e.treatment2-c.treatment2)
mean(apply(NB, 1, max)) - max(apply(NB, 2, mean))
## As vectors
NB1 <- WTP*e.treatment1-c.treatment1
NB2 <- WTP*e.treatment2-c.treatment2
mean(pmax(NB1, NB2)) - max(mean(NB1), mean(NB2))
## Plotting
WTP.vec <- seq(0, 200000, length.out = 501)
EVPI <- vector("numeric", 501)
n <- 1
for(W in WTP.vec){
NB1.vec <- W*e.treatment1-c.treatment1
NB2.vec <- W*e.treatment2-c.treatment2
EVPI[n] <- mean(pmax(NB1.vec, NB2.vec)) -
max(mean(NB1.vec), mean(NB2.vec))
n <- n + 1
}
## Plot
plot(WTP.vec, EVPI, type = "l",
xlab = "Willingness-to-pay",
ylab = "Expected Value of Perfect Information")
# Based on these commands, calculate EVPPI as in the practical.
## Easier to work with INB
INB <- NB2 - NB1
mean(pmax(NB1, NB2)) - max(mean(NB1), mean(NB2))
# Based on these commands, calculate EVPPI as in the practical.
## Easier to work with INB
INB <- NB2 - NB1
model.mgcv.example <- gam(INB ~ s(theta[,1]))
fit1 <- model.mgcv.example$fitted.values
## Compare with 0.
mean(pmax(0,fits))- max(mean(fits),0)
INB <- NB2 - NB1
model.mgcv.example <- gam(INB ~ s(theta[,1]))
fit1 <- model.mgcv.example$fitted.values
## Compare with 0.
mean(pmax(0,fits))- max(mean(fits),0)
## Compare with 0.
mean(pmax(0,fit1))- max(mean(fit1),0)
# Based on these commands, calculate EVPPI as in the practical.
## Easier to work with INB
INB <- NB2 - NB1
## Theta 1
model.mgcv.example <- gam(INB ~ s(theta[,1]))
fit1 <- model.mgcv.example$fitted.values
## Compare with 0.
mean(pmax(0,fit1))- max(mean(fit1),0)
## Compare with 0.
mean(pmax(0,fit1.11))- max(mean(fit1.11),0)
## Theta 1, 11
model.mgcv.example <- gam(INB ~ te(theta[,1], theta[, 11]))
fit1.11 <- model.mgcv.example$fitted.values
## Compare with 0.
mean(pmax(0,fit1.11))- max(mean(fit1.11),0)
## Theta 1, 11
model.mgcv.example <- gam(INB ~ te(theta[,5], theta[, 14]))
fit5.14 <- model.mgcv.example$fitted.values
## Compare with 0.
mean(pmax(0,fit5.14))- max(mean(fit5.14),0)
## Theta 5, 14
model.mgcv.example <- gam(INB ~ s(theta[,6]))
fit6 <- model.mgcv.example$fitted.values
## Compare with 0.
mean(pmax(0,fit6))- max(mean(fit6),0)
## Calculate the regression
model.mgcv.example.bivariate <- gam(INB ~ te(theta[,6],theta[,7],
theta[,15],theta[,16]))
## Extract the fitted values
fitgroup <- model.mgcv.example.bivariate$fitted.values
## Compare with 0.
mean(pmax(0,fitgroup))- max(mean(fitgroup),0)
mean(INB)
