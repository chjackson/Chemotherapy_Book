stop("This plot gives the EVSI across sample size. Do not use on a single design.")
}
EVSI <- evsi$evsi[k.select + 1]
plot(1, 1, ylim = c(min(EVSI) * 0.95, max(EVSI) * 1.05),
xlim = c(min(evsi$attrib$N), max(evsi$attrib$N)), col = "white",
xlab = expression("Sample Size"), ylab = "Per Person EVSI",
oma = c(0, 0, -1, 0), main = "Expected Value of Sample Information across Sample Size")
if (length(evsi$attrib$N) < 15) {
points(evsi$attrib$N, t(EVSI), pch = 19, lwd = 2,
lty = 1)
}
if (length(evsi$attrib$N) >= 15) {
points(evsi$attrib$N, t(EVSI), type = "l", lwd = 2,
lty = 1)
}
evppi <- evsi$evppi$evppi[k.select]
abline(h = evppi, col = "springgreen", lwd = 3, lty = 2)
legend(alt.legend, c("EVSI", "EVPPI"), col = c("black", "springgreen"),
lwd = c(2,3), lty = c(1,2), box.lwd = 0,
box.col = "white", bg = "white")
box()
}
evsi.ss.plot(plotting)
plotting$evppi$evppi
plotting$evppi$evppi[198]
evsi.ss.plot <- function (evsi, k.select = NULL, pos = c("bottomright"))
{
alt.legend <- pos
if (is.numeric(alt.legend) & length(alt.legend) == 2) {
temp <- ""
if (alt.legend[2] == 0)
temp <- paste0(temp, "bottom")
else if (alt.legend[2] != 0.5)
temp <- paste0(temp, "top")
if (alt.legend[1] == 1)
temp <- paste0(temp, "right")
else temp <- paste0(temp, "left")
alt.legend <- temp
if (length(grep("^((bottom|top)(left|right)|right)$",
temp)) == 0)
alt.legend <- FALSE
}
if (is.logical(alt.legend)) {
if (!alt.legend)
alt.legend = "topright"
else alt.legend = "topleft"
}
if (class(k.select) == "numeric") {
k.select <- which.min(abs(evsi$attrib$k - k.select))
k <- evsi$attrib$k[k.select]
}
if (class(k.select) != "numeric") {
k.select <- which.max(evsi$evpi$evpi)
k <- evsi$attrib$k[k.select]
}
if (length(evsi$attrib$N) == 1) {
stop("This plot gives the EVSI across sample size. Do not use on a single design.")
}
EVSI <- evsi$evsi[k.select + 1]
evppi <- evsi$evppi$evppi[k.select]
plot(1, 1, ylim = c(min(EVSI) * 0.95, evppi),
xlim = c(min(evsi$attrib$N), max(evsi$attrib$N)), col = "white",
xlab = expression("Sample Size"), ylab = "Per Person EVSI",
oma = c(0, 0, -1, 0), main = "Expected Value of Sample Information across Sample Size")
if (length(evsi$attrib$N) < 15) {
points(evsi$attrib$N, t(EVSI), pch = 19, lwd = 2,
lty = 1)
}
if (length(evsi$attrib$N) >= 15) {
points(evsi$attrib$N, t(EVSI), type = "l", lwd = 2,
lty = 1)
}
abline(h = evppi, col = "springgreen", lwd = 3, lty = 2)
legend(alt.legend, c("EVSI", "EVPPI"), col = c("black", "springgreen"),
lwd = c(2,3), lty = c(1,2), box.lwd = 0,
box.col = "white", bg = "white")
box()
}
evsi.ss.plot(plotting)
EVSI::plot.prob.ce
names(plotting)
evsi.prob.plot <- function (evsi, trial.cost = NULL, setup = NULL, pp = NULL,
Pop = c(0, 10000), Time = c(1, 20), Dis = 0.035, k.select = NULL, N = NULL,
pos = c("topright"))
{
alt.legend <- pos
if (is.numeric(alt.legend) & length(alt.legend) == 2) {
temp <- ""
if (alt.legend[2] == 0)
temp <- paste0(temp, "bottom")
else if (alt.legend[2] != 0.5)
temp <- paste0(temp, "top")
if (alt.legend[1] == 1)
temp <- paste0(temp, "right")
else temp <- paste0(temp, "left")
alt.legend <- temp
if (length(grep("^((bottom|top)(left|right)|right)$",
temp)) == 0)
alt.legend <- FALSE
}
if (is.logical(alt.legend)) {
if (!alt.legend)
alt.legend = "topright"
else alt.legend = "topleft"
}
if (class(k.select) == "numeric") {
k.select <- which.min(abs(evsi$attrib$k - k.select))
k <- evsi$attrib$k[k.select]
}
if (class(k.select) != "numeric") {
k.select <- which.max(evsi$evpi$evpi)
k <- evsi$attrib$k[k.select]
}
if (class(evsi$attrib$N) != "numeric") {
N.select <- 1
if (class(N) != "numeric") {
N <- evsi$attrib$N
}
}
if (class(evsi$attrib$N) == "numeric") {
if (class(N) != "numeric") {
N.select <- ceiling(length(evsi$attrib$N)/2)
N <- evsi$attrib$N[N.select]
}
if (class(N) == "numeric") {
N.select <- which.min(abs(evsi$attrib$N - N))
}
}
type.evsi <- "det"
evsi.focal <- c(evsi$evsi[N.select, wtp.select + 1])
evsi.params <- c(evsi$evsi[N.select, wtp.select + 1],
0)
if (is.null(trial.cost)) {
if (class(N) == "character") {
stop("Please define the trial costs using trial.costs or the sample size of experiment using N=")
}
if (is.null(setup) || is.null(pp)) {
stop("Please give the trial costs using either trial.costs for the full costs\n                                         or setup and pp to give the set up and per person costs ")
}
setup.params <- c(mean(setup), (range(setup)[2] - range(setup)[1])/4)
pp.params <- c(mean(pp), (range(pp)[2] - range(pp)[1])/4)
trial.cost <- c(setup.params[1] + pp.params[1] * N, sqrt(setup.params[2]^2 +
N^2 * pp.params[2]^2))
}
colours <- colorRampPalette(c("black", "navy", "blue", "skyblue",
"aliceblue", "white"))(100)
ENBS <- function(evsi, Pop, Time, Dis, cost) {
enbs <- evsi * Pop/Dis * (1 - exp(-Dis * Time)) - cost
return(enbs)
}
ENBS.sd.calc <- function(evsi.sd, Pop, Time, Dis, cost.sd) {
var <- (Pop/Dis * (1 - exp(-Dis * Time)))^2 * evsi.sd^2 +
cost.sd^2
return(sqrt(var))
}
if (class(trial.cost) == "numeric") {
if (length(trial.cost) == 1) {
trial.cost.params <- c(trial.cost, 0)
}
if (length(trial.cost) == 2) {
trial.cost.params <- c(mean(trial.cost), (range(trial.cost)[2] -
range(trial.cost)[1])/2)
}
Time.min <- min(Time)
Time.max <- max(Time)
Pop.min <- min(Pop)
Pop.max <- max(Pop)
dens.points <- 100
Time.seq <- seq(Time.min, Time.max, length.out = dens.points)
Pop.seq <- seq(Pop.min, Pop.max, length.out = dens.points)
Prob.mat <- matrix(NA, nrow = length(Time.seq), ncol = length(Pop.seq))
for (i in 1:length(Time.seq)) {
for (j in 1:length(Pop.seq)) {
ENBS.mean <- ENBS(evsi.params[1], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[1])
ENBS.sd <- ENBS.sd.calc(evsi.params[2], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[2])
Prob.mat[i, j] <- pnorm(0, ENBS.mean, ENBS.sd,
lower.tail = FALSE)
}
}
}
EVSI.full <- function(evsi, Pop, Time, Dis) {
evsi <- Pop * evsi/Dis * (1 - exp(-Dis * Time))
return(evsi)
}
if (class(trial.cost) == "character") {
if (type.evsi == "rand") {
warning("The trial cost given as a distribution so probablistic EVSI analysis cannot be performed")
CI.select <- which.min((evsi$attrib$CI - 0.5)^2)
type.evsi <- "det"
evsi.focal <- evsi$evsi[N.select, wtp.select, CI.select]
}
split.1 <- strsplit(trial.cost, split = NULL)
commas <- which(split.1[[1]] == ",")
first.braket <- which(split.1[[1]] == "(") + 1
second.braket <- which(split.1[[1]] == ")") - 1
n.args <- length(commas) + 1
args <- list()
args[[1]] <- eval(parse(text = paste(split.1[[1]][first.braket:(commas[1] -
1)], sep = "", collapse = "")))
if (n.args > 2) {
for (i in 2:(n.args - 1)) {
args[[i]] <- (paste(split.1[[1]][(commas[i -
1] + 1):(commas[i] - 1)], sep = "", collapse = ""))
}
}
args[[n.args]] <- eval(parse(text = (paste(split.1[[1]][(commas[length(commas)] +
1):second.braket], sep = "", collapse = ""))))
func.samp <- paste(split.1[[1]][2:(first.braket - 2)],
sep = "", collapse = "")
func.samp <- paste("p", func.samp, sep = "", collapse = "")
Time.min <- min(Time)
Time.max <- max(Time)
Pop.min <- min(Pop)
Pop.max <- max(Pop)
dens.points <- 100
Time.seq <- seq(Time.min, Time.max, length.out = dens.points)
Pop.seq <- seq(Pop.min, Pop.max, length.out = dens.points)
Prob.mat <- matrix(NA, nrow = length(Time.seq), ncol = length(Pop.seq))
for (i in 1:length(Time.seq)) {
for (j in 1:length(Pop.seq)) {
EVSI <- EVSI.full(evsi.focal, Pop.seq[j], Time.seq[i],
Dis)
Prob.mat[i, j] <- do.call(func.samp, append(as.list(EVSI),
args))
}
}
}
image(x = Time.seq, y = Pop.seq, z = Prob.mat, col = colours,
main = "Probability of Cost-Effective Trial", xlab = "Time Horizon",
ylab = "Incidence Population", xlim = c(Time.min, Time.max),
ylim = c(Pop.min, Pop.max), breaks = seq(0, 1, length.out = 101))
legend(alt.legend, c("Prob=0", rep(NA, 98/2), "Prob=.5",
rep(NA, 96/2), "Prob=1"), fill = colours, border = colours,
cex = 0.75, y.intersp = 0.15, box.lwd = 0, box.col = "white",
bg = "white")
box()
}
evsi.prob.plot(plotting, trial.cost = c(10000,100000))
evsi.prob.plot(plotting, trial.cost = c(10000,100000), k.select = 20000)
evsi.prob.plot <- function (evsi, trial.cost = NULL, setup = NULL, pp = NULL,
Pop = c(0, 10000), Time = c(1, 20), Dis = 0.035, k.select = NULL, N = NULL,
pos = c("topright"))
{
alt.legend <- pos
if (is.numeric(alt.legend) & length(alt.legend) == 2) {
temp <- ""
if (alt.legend[2] == 0)
temp <- paste0(temp, "bottom")
else if (alt.legend[2] != 0.5)
temp <- paste0(temp, "top")
if (alt.legend[1] == 1)
temp <- paste0(temp, "right")
else temp <- paste0(temp, "left")
alt.legend <- temp
if (length(grep("^((bottom|top)(left|right)|right)$",
temp)) == 0)
alt.legend <- FALSE
}
if (is.logical(alt.legend)) {
if (!alt.legend)
alt.legend = "topright"
else alt.legend = "topleft"
}
if (class(k.select) == "numeric") {
k.select <- which.min(abs(evsi$attrib$k - k.select))
k <- evsi$attrib$k[k.select]
}
if (class(k.select) != "numeric") {
k.select <- which.max(evsi$evpi$evpi)
k <- evsi$attrib$k[k.select]
}
if (class(evsi$attrib$N) != "numeric") {
N.select <- 1
if (class(N) != "numeric") {
N <- evsi$attrib$N
}
}
if (class(evsi$attrib$N) == "numeric") {
if (class(N) != "numeric") {
N.select <- ceiling(length(evsi$attrib$N)/2)
N <- evsi$attrib$N[N.select]
}
if (class(N) == "numeric") {
N.select <- which.min(abs(evsi$attrib$N - N))
}
}
type.evsi <- "det"
evsi.focal <- c(evsi$evsi[N.select, k.select + 1])
evsi.params <- c(evsi$evsi[N.select, k.select + 1],
0)
if (is.null(trial.cost)) {
if (class(N) == "character") {
stop("Please define the trial costs using trial.costs or the sample size of experiment using N=")
}
if (is.null(setup) || is.null(pp)) {
stop("Please give the trial costs using either trial.costs for the full costs\n                                         or setup and pp to give the set up and per person costs ")
}
setup.params <- c(mean(setup), (range(setup)[2] - range(setup)[1])/4)
pp.params <- c(mean(pp), (range(pp)[2] - range(pp)[1])/4)
trial.cost <- c(setup.params[1] + pp.params[1] * N, sqrt(setup.params[2]^2 +
N^2 * pp.params[2]^2))
}
colours <- colorRampPalette(c("black", "navy", "blue", "skyblue",
"aliceblue", "white"))(100)
ENBS <- function(evsi, Pop, Time, Dis, cost) {
enbs <- evsi * Pop/Dis * (1 - exp(-Dis * Time)) - cost
return(enbs)
}
ENBS.sd.calc <- function(evsi.sd, Pop, Time, Dis, cost.sd) {
var <- (Pop/Dis * (1 - exp(-Dis * Time)))^2 * evsi.sd^2 +
cost.sd^2
return(sqrt(var))
}
if (class(trial.cost) == "numeric") {
if (length(trial.cost) == 1) {
trial.cost.params <- c(trial.cost, 0)
}
if (length(trial.cost) == 2) {
trial.cost.params <- c(mean(trial.cost), (range(trial.cost)[2] -
range(trial.cost)[1])/2)
}
Time.min <- min(Time)
Time.max <- max(Time)
Pop.min <- min(Pop)
Pop.max <- max(Pop)
dens.points <- 100
Time.seq <- seq(Time.min, Time.max, length.out = dens.points)
Pop.seq <- seq(Pop.min, Pop.max, length.out = dens.points)
Prob.mat <- matrix(NA, nrow = length(Time.seq), ncol = length(Pop.seq))
for (i in 1:length(Time.seq)) {
for (j in 1:length(Pop.seq)) {
ENBS.mean <- ENBS(evsi.params[1], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[1])
ENBS.sd <- ENBS.sd.calc(evsi.params[2], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[2])
Prob.mat[i, j] <- pnorm(0, ENBS.mean, ENBS.sd,
lower.tail = FALSE)
}
}
}
EVSI.full <- function(evsi, Pop, Time, Dis) {
evsi <- Pop * evsi/Dis * (1 - exp(-Dis * Time))
return(evsi)
}
image(x = Time.seq, y = Pop.seq, z = Prob.mat, col = colours,
main = "Probability of Cost-Effective Trial", xlab = "Time Horizon",
ylab = "Incidence Population", xlim = c(Time.min, Time.max),
ylim = c(Pop.min, Pop.max), breaks = seq(0, 1, length.out = 101))
legend(alt.legend, c("Prob=0", rep(NA, 98/2), "Prob=.5",
rep(NA, 96/2), "Prob=1"), fill = colours, border = colours,
cex = 0.75, y.intersp = 0.15, box.lwd = 0, box.col = "white",
bg = "white")
box()
}
evsi.prob.plot(plotting, trial.cost = c(10000,100000), k.select = 20000)
debug(evsi.prob.plot)
evsi.prob.plot(plotting, trial.cost = c(10000,100000), k.select = 20000)
class(k.select)
evsi.focal
evsi.params
as.numeric(c(evsi$evsi[N.select, k.select + 1]))
evsi$evsi[N.select, k.select + 1]
evsi$evsi
evsi.focal <- as.numeric(c(evsi$evsi[N.select, k.select + 1]))
evsi.params <- c(as.numeric(evsi$evsi[N.select, k.select + 1]),
0)
Time.seq
Pop.seq
Prob.mat
Pop.seq[j]
Time.seq[i]
Dis
trial.cost.params[1]
evsi.params[1]
ENBS(evsi.params[1], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[1])
evsi.params[2]
trial.cost.params[2]
ENBS.sd.calc(evsi.params[2], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[2])
pnorm(0, ENBS.mean, ENBS.sd,
lower.tail = FALSE)
image(x = Time.seq, y = Pop.seq, z = Prob.mat, col = colours,
main = "Probability of Cost-Effective Trial", xlab = "Time Horizon",
ylab = "Incidence Population", xlim = c(Time.min, Time.max),
ylim = c(Pop.min, Pop.max), breaks = seq(0, 1, length.out = 101))
legend(alt.legend, c("Prob=0", rep(NA, 98/2), "Prob=.5",
rep(NA, 96/2), "Prob=1"), fill = colours, border = colours,
cex = 0.75, y.intersp = 0.15, box.lwd = 0, box.col = "white",
bg = "white")
box()
EVSI.full <- function(evsi, Pop, Time, Dis) {
evsi <- Pop * evsi/Dis * (1 - exp(-Dis * Time))
return(evsi)
}
evsi.prob.plot <- function (evsi, trial.cost = NULL, setup = NULL, pp = NULL,
Pop = c(0, 10000), Time = c(1, 20), Dis = 0.035, k.select = NULL, N = NULL,
pos = c("topright"))
{
alt.legend <- pos
if (is.numeric(alt.legend) & length(alt.legend) == 2) {
temp <- ""
if (alt.legend[2] == 0)
temp <- paste0(temp, "bottom")
else if (alt.legend[2] != 0.5)
temp <- paste0(temp, "top")
if (alt.legend[1] == 1)
temp <- paste0(temp, "right")
else temp <- paste0(temp, "left")
alt.legend <- temp
if (length(grep("^((bottom|top)(left|right)|right)$",
temp)) == 0)
alt.legend <- FALSE
}
if (is.logical(alt.legend)) {
if (!alt.legend)
alt.legend = "topright"
else alt.legend = "topleft"
}
if (class(k.select) == "numeric") {
k.select <- which.min(abs(evsi$attrib$k - k.select))
k <- evsi$attrib$k[k.select]
}
if (class(k.select) != "numeric") {
k.select <- which.max(evsi$evpi$evpi)
k <- evsi$attrib$k[k.select]
}
if (class(evsi$attrib$N) != "numeric") {
N.select <- 1
if (class(N) != "numeric") {
N <- evsi$attrib$N
}
}
if (class(evsi$attrib$N) == "numeric") {
if (class(N) != "numeric") {
N.select <- ceiling(length(evsi$attrib$N)/2)
N <- evsi$attrib$N[N.select]
}
if (class(N) == "numeric") {
N.select <- which.min(abs(evsi$attrib$N - N))
}
}
type.evsi <- "det"
evsi.focal <- as.numeric(c(evsi$evsi[N.select, k.select + 1]))
evsi.params <- c(as.numeric(evsi$evsi[N.select, k.select + 1]),
0)
if (is.null(trial.cost)) {
if (class(N) == "character") {
stop("Please define the trial costs using trial.costs or the sample size of experiment using N=")
}
if (is.null(setup) || is.null(pp)) {
stop("Please give the trial costs using either trial.costs for the full costs\n                                         or setup and pp to give the set up and per person costs ")
}
setup.params <- c(mean(setup), (range(setup)[2] - range(setup)[1])/4)
pp.params <- c(mean(pp), (range(pp)[2] - range(pp)[1])/4)
trial.cost <- c(setup.params[1] + pp.params[1] * N, sqrt(setup.params[2]^2 +
N^2 * pp.params[2]^2))
}
colours <- colorRampPalette(c("black", "navy", "blue", "skyblue",
"aliceblue", "white"))(100)
ENBS <- function(evsi, Pop, Time, Dis, cost) {
enbs <- evsi * Pop/Dis * (1 - exp(-Dis * Time)) - cost
return(enbs)
}
ENBS.sd.calc <- function(evsi.sd, Pop, Time, Dis, cost.sd) {
var <- (Pop/Dis * (1 - exp(-Dis * Time)))^2 * evsi.sd^2 +
cost.sd^2
return(sqrt(var))
}
if (class(trial.cost) == "numeric") {
if (length(trial.cost) == 1) {
trial.cost.params <- c(trial.cost, 0)
}
if (length(trial.cost) == 2) {
trial.cost.params <- c(mean(trial.cost), (range(trial.cost)[2] -
range(trial.cost)[1])/2)
}
Time.min <- min(Time)
Time.max <- max(Time)
Pop.min <- min(Pop)
Pop.max <- max(Pop)
dens.points <- 100
Time.seq <- seq(Time.min, Time.max, length.out = dens.points)
Pop.seq <- seq(Pop.min, Pop.max, length.out = dens.points)
Prob.mat <- matrix(NA, nrow = length(Time.seq), ncol = length(Pop.seq))
for (i in 1:length(Time.seq)) {
for (j in 1:length(Pop.seq)) {
ENBS.mean <- ENBS(evsi.params[1], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[1])
ENBS.sd <- ENBS.sd.calc(evsi.params[2], Pop.seq[j],
Time.seq[i], Dis, trial.cost.params[2])
Prob.mat[i, j] <- pnorm(0, ENBS.mean, ENBS.sd,
lower.tail = FALSE)
}
}
}
image(x = Time.seq, y = Pop.seq, z = Prob.mat, col = colours,
main = "Probability of Cost-Effective Trial", xlab = "Time Horizon",
ylab = "Incidence Population", xlim = c(Time.min, Time.max),
ylim = c(Pop.min, Pop.max), breaks = seq(0, 1, length.out = 101))
legend(alt.legend, c("Prob=0", rep(NA, 98/2), "Prob=.5",
rep(NA, 96/2), "Prob=1"), fill = colours, border = colours,
cex = 0.75, y.intersp = 0.15, box.lwd = 0, box.col = "white",
bg = "white")
box()
}
evsi.prob.plot(plotting, trial.cost = c(10000,100000), k.select = 20000)
evsi.prob.plot(plotting, trial.cost = c(100000), k.select = 20000)
evsi.prob.plot(plotting, trial.cost = c(1e7), k.select = 20000)
EVSI::plot.enbs
