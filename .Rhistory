# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
length(which(is.na(dat_try),arr.ind = TRUE))
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.00001, 0.0005))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.0075))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.02))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.00001, 0.0005))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.01))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
length(which(is.na(dat_try),arr.ind = TRUE))
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.00001, 0.0002))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.01))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
length(which(is.na(dat_try),arr.ind = TRUE))
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.00001, 0.0001))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.01))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
length(which(is.na(dat_try),arr.ind = TRUE))
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00005))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.01))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00002))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.01))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00001))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.01))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
length(which(is.na(dat_try),arr.ind = TRUE))
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00001))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.005))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00001))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.005))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
set.seed(123)
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
length(which(is.na(dat_try),arr.ind = TRUE))
length(which(is.na(dat_try),arr.ind = TRUE)[, ])
length(which(is.na(dat_try),arr.ind = TRUE)[, 1])
length(which(is.na(dat_try),arr.ind = TRUE)[, 2])
table(which(is.na(dat_try),arr.ind = TRUE)[, 2])
table(which(is.na(dat_try),arr.ind = TRUE)[, 1])
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00001))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.005))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- rbeta(n[1], par_recovery$alpha, par_recovery$beta)
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
table(which(is.na(dat_try),arr.ind = TRUE)[, 1])
i <- 3150
inputs <- m_params
set.seed(123 + i)
m_recovery <- inputs[i, "u_recovery"]
m_recovery
m_home_care <- inputs[i, "u_home_care"]
m_home_care
m_hospital
m_hospital <- inputs[i, "u_hospital"]
m_hospital
sd_recovery <- sd_recovery_fun()
sd_recovery
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00001))}
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.005))}
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_recovery
#### STUDY 6: A Utility Analysis ####
# Data generation function
utility_datagen_fn <- function(inputs, n = 500,
sd_recovery_fun = function(){return(runif(1, 0.000001, 0.00001))},
sd_home_care_fun = function(){return(runif(1, 0.00001, 0.005))},
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.01))}
){
betaPar <- function(m, s) {
# m:  Mean of the Beta distribution
# m: Standard deviation of the Beta distribution
var <- s ^ 2
alpha <- ((1 - m) / var - 1 / m) * m ^ 2
beta <- alpha * (1 / m - 1)
return(
list(alpha = alpha, beta = beta)
)
}
# Load the data
X_home_care <- X_hospital <- X_recovery <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_recovery <- inputs[i, "u_recovery"]
m_home_care <- inputs[i, "u_home_care"]
m_hospital <- inputs[i, "u_hospital"]
sd_recovery <- sd_recovery_fun()
sd_home_care <- sd_home_care_fun()
sd_hospital <- sd_hospital_fun()
par_recovery <- betaPar(m_recovery, sd_recovery)
par_home_care <- betaPar(m_home_care, sd_home_care)
par_hospital <- betaPar(m_hospital, sd_hospital)
# Simulate the costs
X_recovery[i, ] <- ifelse(m_recovery == 1, rep(1, n[1]),
rbeta(n[1], par_recovery$alpha, par_recovery$beta))
X_home_care[i, ] <- rbeta(n[1], par_home_care$alpha, par_home_care$beta)
X_hospital[i, ] <- rbeta(n[1], par_hospital$alpha, par_hospital$beta)
}
data_save_dat <- data.frame(cbind(X_recovery = X_recovery,
X_home_care = X_home_care,
X_hospital = X_hospital))
return(data_save_dat)
}
dat_try <- utility_datagen_fn(m_params)
dat_try
table(which(is.na(dat_try),arr.ind = TRUE)[, 1])
m_recovery
m_recovery == 1
m_recovery >= 1
