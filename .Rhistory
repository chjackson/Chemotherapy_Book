apply(1,cumsum)
switch(sucra+1, x[1,], apply(matrix(x[-nrow(x),],nrow = nrow(x)-1),2,mean))|>
`names<-`(colnames(d))
}
#--------
#--------------------------------------------------------------------------------------------
# sample size -------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------
n = 95
################################################################################################
# Power
#.. data
set.seed(1111)
# keep trrack both data and prior mu
dat_from_trials_pow<-
replicate(R,{
nu = pr0[1,"beta"]/pr0[1,"v_sq"]+1
nj = pr0[,"beta"]/pr0[,"vars"]/(nu-1)
lambda = rgamma(1,nu, pr0[1,"beta"])
a = MME(pr0[,"mu0"],1/nj/lambda)
mu_t = Vectorize(rlnorm, vectorize.args = c("n","meanlog","sdlog"))(1, a["mu",], sqrt(a["sig2",]))
b = MME(mu_t,1/lambda)
x = Vectorize(rlnorm, vectorize.args = c("n","meanlog","sdlog"))(n, b["mu",], sqrt(b["sig2",] ))|>
`colnames<-`(rownames(pr0))
list(mu_t,log(x))
}, simplify = F)
# extract data
dat_from_trials2<- lapply(dat_from_trials_pow, \(i) i[[2]])|>
`names<-`(paste0(1:R))
# check -------------
sapply(dat_from_trials2, compose(c,exp)   )|> c()|>{\(i) mean(i>23.5)}()
sapply(dat_from_trials2, \(i)  apply(i,2, \(j) mean(exp(j))))|> apply(1,mean)|> round(3)
sapply(dat_from_trials2, \(i)  apply(i,2, \(j) var(exp(j))))|> apply(1,mean)|> round(3)
lift_dl(rbind)(dat_from_trials2)|> apply(2, var  )
#
##############mean#######################################
# extract prior mu and evaluate which treatment is the best based on simulated priors
pr_best = sapply(dat_from_trials_pow, \(i) i[[1]])|>
t()|>
`colnames<-`(rownames(pr))|>
apply(1,which.min)|>
`names<-`(paste0(1:R))
# calculate sucra with first 55 rows (small sample size for interim analysis)
set.seed(2222)
sucra0 = sapply(dat_from_trials2[1:10], SUCRARank1, R = R, n_row = 55)|> t()
rankI0 = sapply(dat_from_trials2[1:10], SUCRARank1, R = R,n_row = 55, sucra = F)|> t()
sucra0[1:4,]; rankI0[1:4,]
# pre-defined threshold to early drop futile treatment
# pre-defined threshold to early drop futile treatment
# thres_drop = c(sucra = 0.335, rankI = 0.07) # < 0.04
# thres_pick = 0.975
# 6
# pre-defined threshold to early drop futile treatment
# pre-defined threshold to early drop futile treatment
# thres_drop = c(sucra = 0.335, rankI = 0.07) # < 0.04
# thres_pick = 0.975
# 6
thres_drop = c(rankI = 0.1, sucra = 0.1)
sucra0 = sapply(dat_from_trials2, SUCRARank1, R = R, n_row = 55)|> t()
rankI0 = sapply(dat_from_trials2, SUCRARank1, R = R,n_row = 55, sucra = F)|> t()
thres_drop = c(rankI = 0.1, sucra = 0.1)
thres_pick = c(rankI  = 0.90, sucra = 0.95)
#9
# thres_drop = c(sucra = 0.6, rankI = 0.105) # 0.15; 0.035
# thres_pick = 0.975
# extract index of datasets that drop at least 1 treatment
ind_sucra = which((sucra0)< thres_drop["sucra"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_sucra)
ind_rankI = which((rankI0)< thres_drop["rankI"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_rankI)
r_sucra <- r_rankI<- rep(NA,nrow(pr))
# index of datasets that do not drop any treatments
set_no_drop_sucra <- paste0(1:R)[!(1:R)%in% names(ind_sucra)]; length(set_no_drop_sucra)
set_no_drop_rankI <- paste0(1:R)[!(1:R)%in% names(ind_rankI)]; length(set_no_drop_rankI)
#... since no treatment dropped, reranking and pick the best
sucra0_no_trt = sapply(dat_from_trials2[set_no_drop_sucra], SUCRARank1, R = R)|> t()
rankI0_no_trt = sapply(dat_from_trials2[set_no_drop_rankI], SUCRARank1, R = R, sucra = F)|> t()
r_sucra[1]<-
apply(sucra0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_sucra])}()
{\(i) sum(i==which.min(pr[,"mu0"]) )}()
r_sucra
r_rankI[1]<-
apply(rankI0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_rankI])}()
{\(i) sum(i== which.min(pr[,"mu0"]) )}()
r_rankI
# Early pick the superior treatment (drop (n-1) treatments at interim analysis)
ind_dropn_sucra <- keep(ind_sucra, ~ length(.)== (nrow(pr)-1) )|> names()
ind_dropn_rackI <- keep(ind_rankI, ~ length(.)== (nrow(pr)-1))|> names()
r_sucra[2]<-
# (sapply(ind_sucra[ind_dropn_sucra], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_sucra])|>
# sum()
(sapply(ind_sucra[ind_dropn_sucra], \(i) !which.min(pr[,"mu0"]) %in% i) )|>
sum()
# pre-defined threshold to early drop futile treatment
# pre-defined threshold to early drop futile treatment
# thres_drop = c(sucra = 0.335, rankI = 0.07) # < 0.04
# thres_pick = 0.975
# 6
thres_drop = c(rankI = 0.1, sucra = 0.1)
thres_pick = c(rankI  = 0.90, sucra = 0.95)
#9
# thres_drop = c(sucra = 0.6, rankI = 0.105) # 0.15; 0.035
# thres_pick = 0.975
# extract index of datasets that drop at least 1 treatment
ind_sucra = which((sucra0)< thres_drop["sucra"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_sucra)
ind_rankI = which((rankI0)< thres_drop["rankI"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_rankI)
r_sucra <- r_rankI<- rep(NA,nrow(pr))
# index of datasets that do not drop any treatments
set_no_drop_sucra <- paste0(1:R)[!(1:R)%in% names(ind_sucra)]; length(set_no_drop_sucra)
set_no_drop_rankI <- paste0(1:R)[!(1:R)%in% names(ind_rankI)]; length(set_no_drop_rankI)
#... since no treatment dropped, reranking and pick the best
sucra0_no_trt = sapply(dat_from_trials2[set_no_drop_sucra], SUCRARank1, R = R)|> t()
rankI0_no_trt = sapply(dat_from_trials2[set_no_drop_rankI], SUCRARank1, R = R, sucra = F)|> t()
r_sucra[1]<-
apply(sucra0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_sucra])}()
{\(i) sum(i==which.min(pr[,"mu0"]) )}()
r_sucra
r_rankI[1]<-
apply(rankI0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_rankI])}()
{\(i) sum(i== which.min(pr[,"mu0"]) )}()
r_rankI
# Early pick the superior treatment (drop (n-1) treatments at interim analysis)
ind_dropn_sucra <- keep(ind_sucra, ~ length(.)== (nrow(pr)-1) )|> names()
ind_dropn_rackI <- keep(ind_rankI, ~ length(.)== (nrow(pr)-1))|> names()
r_sucra[2]<-
# (sapply(ind_sucra[ind_dropn_sucra], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_sucra])|>
# sum()
(sapply(ind_sucra[ind_dropn_sucra], \(i) !which.min(pr[,"mu0"]) %in% i) )|>
sum()
r_rankI[2]<-
# (sapply(ind_rankI[ind_dropn_rackI], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_rackI])|>
# sum()
(sapply(ind_rankI[ind_dropn_rackI], \(i) !which.min(pr[,"mu0"]) %in% i ))|>
sum()
for(i in 1:(nrow(pr)-2)){
ind_drop1_sucra <- keep(ind_sucra, ~ length(.)==i)|> names()
ind_drop1_rackI <- keep(ind_rankI, ~ length(.)==i)|> names()
if(length(ind_drop1_sucra)!=0){
r_sucra[i+2]<-
sapply(ind_drop1_sucra,\(drop1){
trt_drop = ind_sucra[[drop1]]
d = dat_from_trials2[[drop1]][,-trt_drop]
best = colnames(d)[which(SUCRARank1(d,R=R)>thres_pick)]
best1 = ifelse((length(best)==0) |(length(best)>1) ,0,best)
#   best1 == rownames(pr)[pr_best[drop1]]
best1 == rownames(pr)[which.min(pr[,"mu0"])]
})|> sum()
}
if(length(ind_drop1_rackI)!=0){
r_rankI[i+2]<-
sapply(ind_drop1_rackI,\(drop1){
trt_drop = ind_rankI[[drop1]]
d = dat_from_trials2[[drop1]][,-trt_drop]
best = colnames(d)[which(SUCRARank1(d,R=R, sucra = F)> thres_pick)]
best1 = ifelse(length(best)==0 |length(best)>1 ,0,best)
#    best1 == rownames(pr)[pr_best[drop1]]
best1 ==  rownames(pr)[which.min(pr[,"mu0"])]
})|> sum()
}
}
sum(r_rankI,na.rm = T)/R
sum(r_sucra, na.rm = T)/R
r_sucra
r_rankI
R
thres_drop = c(rankI = 0.1, sucra = 0.10)
thres_pick = c(rankI  = 0.9, sucra = 0.95)
FAIL_sucra <- FAIL_rank1 <- vector("logical", R)
for(i in 1:R){
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
Rank1_data <- dat_from_trials2[[i]][ , rankI0[i, ] >= thres_drop[1]]
if(length(dim(Rank1_data)) == 1){
FAIL_rank1[i] <- TRUE
}
if(length(dim(SURCA_data)) == 1){
FAIL_sucra[i] <- TRUE
}
if(length(dim(Rank1_data)) > 1){
rank1_i <- SUCRARank1(Rank1_data, R = R, sucra = F)
FAIL_rank1[i] <- sum(rank1_i > thres_pick[1]) == 1
}
if(length(dim(SURCA_data)) > 1){
sucra_i <- SUCRARank1(SURCA_data, R = R)
FAIL_sucra[i] <- sum(sucra_i > thres_pick[2]) == 1
}
}
mean(FAIL_sucra); mean(FAIL_rank1)
FAIL_rank1
length(dim(Rank1_data))
Rank1_data
rankI0
rankI0[i, ] >= thres_drop[1]
rankI0[i, ]
rankI0[i, ] >= thres_drop[1]
Rank1_data
length(dim(Rank1_data))
FAIL_sucra <- FAIL_rank1 <- vector("logical", R)
for(i in 1:R){
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
Rank1_data <- dat_from_trials2[[i]][ , rankI0[i, ] >= thres_drop[1]]
if(length(dim(Rank1_data)) == 0){
FAIL_rank1[i] <- TRUE
}
if(length(dim(SURCA_data)) == 0){
FAIL_sucra[i] <- TRUE
}
if(length(dim(Rank1_data)) > 0){
rank1_i <- SUCRARank1(Rank1_data, R = R, sucra = F)
FAIL_rank1[i] <- sum(rank1_i > thres_pick[1]) == 1
}
if(length(dim(SURCA_data)) > 0){
sucra_i <- SUCRARank1(SURCA_data, R = R)
FAIL_sucra[i] <- sum(sucra_i > thres_pick[2]) == 1
}
}
mean(FAIL_sucra); mean(FAIL_rank1)
pr_best
pr_best
mean(FAIL_sucra); mean(FAIL_rank1)
SURCA_data
sum(sucra_i > thres_pick[2]) == 1
sucra_i > thres_pick[2]
pr_best
sucra_i
dat_from_trials2[[i]]
names(dat_from_trials2[[i]])
colnames(dat_from_trials2[[i]])
pr_best
colnames(dat_from_trials2[[i]])[pr_best]
colnames(dat_from_trials2[[i]])[pr_best][i]
names(which(sucra_i > thres_pick[2]))
TRUE_max <- names(which(sucra_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max
Rank1_data
rankI0[i, ] >= thres_drop[1]
FAIL_sucra <- FAIL_rank1 <- vector("logical", R)
for(i in 1:R){
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
Rank1_data <- dat_from_trials2[[i]][ , rankI0[i, ] >= thres_drop[1]]
if(length(dim(Rank1_data)) == 0){
TRUE_max <- names(which(rankI0[i, ] >= thres_drop[1]) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_rank1[i] <- TRUE & TRUE_max
i
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
Rank1_data <- dat_from_trials2[[i]][ , rankI0[i, ] >= thres_drop[1]]
if(length(dim(Rank1_data)) == 0){
TRUE_max <- names(which(rankI0[i, ] >= thres_drop[1]) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_rank1[i] <- TRUE & TRUE_max
TRUE_max <- names(which(rankI0[i, ] >= thres_drop[1])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max
FAIL_sucra <- FAIL_rank1 <- vector("logical", R)
for(i in 1:R){
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
Rank1_data <- dat_from_trials2[[i]][ , rankI0[i, ] >= thres_drop[1]]
if(length(dim(Rank1_data)) == 0){
TRUE_max <- names(which(rankI0[i, ] >= thres_drop[1])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_rank1[i] <- TRUE & TRUE_max
}
if(length(dim(SURCA_data)) == 0){
TRUE_max <- names(which(sucra0[i, ] >= thres_drop[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_sucra[i] <- TRUE & TRUE_max
}
if(length(dim(Rank1_data)) > 0){
rank1_i <- SUCRARank1(Rank1_data, R = R, sucra = F)
TRUE_max <- names(which(rank1_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_rank1[i] <- sum((rank1_i > thres_pick[1]) & TRUE_max) == 1
}
if(length(dim(SURCA_data)) > 0){
sucra_i <- SUCRARank1(SURCA_data, R = R)
TRUE_max <- names(which(sucra_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_sucra[i] <- sum((sucra_i > thres_pick[2]) & TRUE_max) == 1
}
}
mean(FAIL_sucra); mean(FAIL_rank1)
TRUE_max
FAIL_sucra
i <- 2
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
SURCA_data
Rank1_data <- dat_from_trials2[[i]][ , rankI0[i, ] >= thres_drop[1]]
Rank1_data
if(length(dim(Rank1_data)) == 0){
TRUE_max <- names(which(rankI0[i, ] >= thres_drop[1])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_rank1[i] <- TRUE & TRUE_max
}
if(length(dim(SURCA_data)) == 0){
TRUE_max <- names(which(sucra0[i, ] >= thres_drop[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_sucra[i] <- TRUE & TRUE_max
}
if(length(dim(Rank1_data)) > 0){
rank1_i <- SUCRARank1(Rank1_data, R = R, sucra = F)
TRUE_max <- names(which(rank1_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_rank1[i] <- sum((rank1_i > thres_pick[1]) & TRUE_max) == 1
}
if(length(dim(SURCA_data)) > 0){
sucra_i <- SUCRARank1(SURCA_data, R = R)
TRUE_max <- names(which(sucra_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
FAIL_sucra[i] <- sum((sucra_i > thres_pick[2]) & TRUE_max) == 1
}
sucra_i
TRUE_max
TRUE_max <- names(which(sucra_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max
sum((sucra_i > thres_pick[2]) & TRUE_max)
rank1_i
TRUE_max <- names(which(rank1_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max <- names(which(rank1_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max
FAIL_rank1
FAIL_sucra
FAIL_rank1
cbind(FAIL_sucra, FAIL_rank1)
i <- 53
SURCA_data <-  dat_from_trials2[[i]][, sucra0[i, ] >= thres_drop[2]]
SURCA_data
Rank1_data
rank1_i <- SUCRARank1(Rank1_data, R = R, sucra = F)
rank1_i
TRUE_max <- names(which(rank1_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max
sucra_i <- SUCRARank1(SURCA_data, R = R)
sucra_i
TRUE_max <- names(which(sucra_i > thres_pick[2])) == colnames(dat_from_trials2[[i]])[pr_best][i]
TRUE_max
colnames(dat_from_trials2[[i]])[pr_best][i]
colnames(dat_from_trials2[[i]])[pr_best]
mean(FAIL_sucra); mean(FAIL_rank1)
thres_drop = c(rankI = 0.1, sucra = 0.1)
thres_pick = c(rankI  = 0.90, sucra = 0.95)
#9
# thres_drop = c(sucra = 0.6, rankI = 0.105) # 0.15; 0.035
# thres_pick = 0.975
# extract index of datasets that drop at least 1 treatment
ind_sucra = which((sucra0)< thres_drop["sucra"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_sucra)
ind_rankI = which((rankI0)< thres_drop["rankI"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_rankI)
r_sucra <- r_rankI<- rep(NA,nrow(pr))
# index of datasets that do not drop any treatments
set_no_drop_sucra <- paste0(1:R)[!(1:R)%in% names(ind_sucra)]; length(set_no_drop_sucra)
set_no_drop_rankI <- paste0(1:R)[!(1:R)%in% names(ind_rankI)]; length(set_no_drop_rankI)
#... since no treatment dropped, reranking and pick the best
sucra0_no_trt = sapply(dat_from_trials2[set_no_drop_sucra], SUCRARank1, R = R)|> t()
rankI0_no_trt = sapply(dat_from_trials2[set_no_drop_rankI], SUCRARank1, R = R, sucra = F)|> t()
r_sucra[1]<-
apply(sucra0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_sucra])}()
{\(i) sum(i==which.min(pr[,"mu0"]) )}()
r_sucra
r_rankI[1]<-
apply(rankI0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_rankI])}()
{\(i) sum(i== which.min(pr[,"mu0"]) )}()
r_rankI
# Early pick the superior treatment (drop (n-1) treatments at interim analysis)
ind_dropn_sucra <- keep(ind_sucra, ~ length(.)== (nrow(pr)-1) )|> names()
ind_dropn_rackI <- keep(ind_rankI, ~ length(.)== (nrow(pr)-1))|> names()
r_sucra[2]<-
# (sapply(ind_sucra[ind_dropn_sucra], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_sucra])|>
# sum()
(sapply(ind_sucra[ind_dropn_sucra], \(i) !which.min(pr[,"mu0"]) %in% i) )|>
sum()
#9
# thres_drop = c(sucra = 0.6, rankI = 0.105) # 0.15; 0.035
# thres_pick = 0.975
# extract index of datasets that drop at least 1 treatment
ind_sucra = which((sucra0)< thres_drop["sucra"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_sucra)
ind_rankI = which((rankI0)< thres_drop["rankI"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_rankI)
r_sucra <- r_rankI<- rep(NA,nrow(pr))
# index of datasets that do not drop any treatments
set_no_drop_sucra <- paste0(1:R)[!(1:R)%in% names(ind_sucra)]; length(set_no_drop_sucra)
set_no_drop_rankI <- paste0(1:R)[!(1:R)%in% names(ind_rankI)]; length(set_no_drop_rankI)
#... since no treatment dropped, reranking and pick the best
sucra0_no_trt = sapply(dat_from_trials2[set_no_drop_sucra], SUCRARank1, R = R)|> t()
rankI0_no_trt = sapply(dat_from_trials2[set_no_drop_rankI], SUCRARank1, R = R, sucra = F)|> t()
r_sucra[1]<-
apply(sucra0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_sucra])}()
{\(i) sum(i==which.min(pr[,"mu0"]) )}()
r_sucra
r_rankI[1]<-
apply(rankI0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
# {\(i) sum(i==pr_best[set_no_drop_rankI])}()
{\(i) sum(i== which.min(pr[,"mu0"]) )}()
r_rankI
# Early pick the superior treatment (drop (n-1) treatments at interim analysis)
ind_dropn_sucra <- keep(ind_sucra, ~ length(.)== (nrow(pr)-1) )|> names()
ind_dropn_rackI <- keep(ind_rankI, ~ length(.)== (nrow(pr)-1))|> names()
r_sucra[2]<-
# (sapply(ind_sucra[ind_dropn_sucra], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_sucra])|>
# sum()
(sapply(ind_sucra[ind_dropn_sucra], \(i) !which.min(pr[,"mu0"]) %in% i) )|>
sum()
r_rankI[2]<-
# (sapply(ind_rankI[ind_dropn_rackI], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_rackI])|>
# sum()
(sapply(ind_rankI[ind_dropn_rackI], \(i) !which.min(pr[,"mu0"]) %in% i ))|>
sum()
for(i in 1:(nrow(pr)-2)){
ind_drop1_sucra <- keep(ind_sucra, ~ length(.)==i)|> names()
ind_drop1_rackI <- keep(ind_rankI, ~ length(.)==i)|> names()
if(length(ind_drop1_sucra)!=0){
r_sucra[i+2]<-
sapply(ind_drop1_sucra,\(drop1){
trt_drop = ind_sucra[[drop1]]
d = dat_from_trials2[[drop1]][,-trt_drop]
best = colnames(d)[which(SUCRARank1(d,R=R)>thres_pick)]
best1 = ifelse((length(best)==0) |(length(best)>1) ,0,best)
#   best1 == rownames(pr)[pr_best[drop1]]
best1 == rownames(pr)[which.min(pr[,"mu0"])]
})|> sum()
}
if(length(ind_drop1_rackI)!=0){
r_rankI[i+2]<-
sapply(ind_drop1_rackI,\(drop1){
trt_drop = ind_rankI[[drop1]]
d = dat_from_trials2[[drop1]][,-trt_drop]
best = colnames(d)[which(SUCRARank1(d,R=R, sucra = F)> thres_pick)]
best1 = ifelse(length(best)==0 |length(best)>1 ,0,best)
#    best1 == rownames(pr)[pr_best[drop1]]
best1 ==  rownames(pr)[which.min(pr[,"mu0"])]
})|> sum()
}
}
sum(r_rankI,na.rm = T)/R
sum(r_sucra, na.rm = T)/R
#9
# thres_drop = c(sucra = 0.6, rankI = 0.105) # 0.15; 0.035
# thres_pick = 0.975
# extract index of datasets that drop at least 1 treatment
ind_sucra = which((sucra0)< thres_drop["sucra"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_sucra)
ind_rankI = which((rankI0)< thres_drop["rankI"], arr.ind = T)|>
{\(k) split(k[,2],k[,1])}()
length(ind_rankI)
r_sucra <- r_rankI<- rep(NA,nrow(pr))
# index of datasets that do not drop any treatments
set_no_drop_sucra <- paste0(1:R)[!(1:R)%in% names(ind_sucra)]; length(set_no_drop_sucra)
set_no_drop_rankI <- paste0(1:R)[!(1:R)%in% names(ind_rankI)]; length(set_no_drop_rankI)
#... since no treatment dropped, reranking and pick the best
sucra0_no_trt = sapply(dat_from_trials2[set_no_drop_sucra], SUCRARank1, R = R)|> t()
rankI0_no_trt = sapply(dat_from_trials2[set_no_drop_rankI], SUCRARank1, R = R, sucra = F)|> t()
r_sucra[1]<-
apply(sucra0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
{\(i) sum(i==pr_best[set_no_drop_sucra])}()
# {\(i) sum(i==which.min(pr[,"mu0"]) )}()
r_sucra
r_rankI[1]<-
apply(rankI0_no_trt > thres_pick,1, \(i) ifelse(length(which(i)) ==0,0, which(i)))|>
{\(i) sum(i==pr_best[set_no_drop_rankI])}()
# {\(i) sum(i== which.min(pr[,"mu0"]) )}()
r_rankI
# Early pick the superior treatment (drop (n-1) treatments at interim analysis)
ind_dropn_sucra <- keep(ind_sucra, ~ length(.)== (nrow(pr)-1) )|> names()
ind_dropn_rackI <- keep(ind_rankI, ~ length(.)== (nrow(pr)-1))|> names()
r_sucra[2]<-
(sapply(ind_sucra[ind_dropn_sucra], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_sucra])|>
sum()
# (sapply(ind_sucra[ind_dropn_sucra], \(i) !which.min(pr[,"mu0"]) %in% i) )|>
sum()
r_rankI[2]<-
(sapply(ind_rankI[ind_dropn_rackI], \(i) which(!(1:nrow(pr))%in%i)) == pr_best[ind_dropn_rackI])|>
sum()
# (sapply(ind_rankI[ind_dropn_rackI], \(i) !which.min(pr[,"mu0"]) %in% i ))|>
sum()
for(i in 1:(nrow(pr)-2)){
ind_drop1_sucra <- keep(ind_sucra, ~ length(.)==i)|> names()
ind_drop1_rackI <- keep(ind_rankI, ~ length(.)==i)|> names()
if(length(ind_drop1_sucra)!=0){
r_sucra[i+2]<-
sapply(ind_drop1_sucra,\(drop1){
trt_drop = ind_sucra[[drop1]]
d = dat_from_trials2[[drop1]][,-trt_drop]
best = colnames(d)[which(SUCRARank1(d,R=R)>thres_pick)]
best1 = ifelse((length(best)==0) |(length(best)>1) ,0,best)
best1 == rownames(pr)[pr_best[drop1]]
# best1 == rownames(pr)[which.min(pr[,"mu0"])]
})|> sum()
}
if(length(ind_drop1_rackI)!=0){
r_rankI[i+2]<-
sapply(ind_drop1_rackI,\(drop1){
trt_drop = ind_rankI[[drop1]]
d = dat_from_trials2[[drop1]][,-trt_drop]
best = colnames(d)[which(SUCRARank1(d,R=R, sucra = F)> thres_pick)]
best1 = ifelse(length(best)==0 |length(best)>1 ,0,best)
best1 == rownames(pr)[pr_best[drop1]]
# best1 ==  rownames(pr)[which.min(pr[,"mu0"])]
})|> sum()
}
}
sum(r_rankI,na.rm = T)/R
sum(r_sucra, na.rm = T)/R
mean(FAIL_sucra); mean(FAIL_rank1)
pr0
