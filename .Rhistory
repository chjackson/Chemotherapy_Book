ev_single <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=pars_all)
pars_all
ev_single <- ev_single %>%
mutate(pars = rep(unlist(pars_all), each = length(chemotherapy_output$k)))
# Explore EVPPI at maximum uncertainty
ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
plot(order = TRUE)
ev_single %>%
filter(k == wtp.max)
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
plot.evppi(order = TRUE)
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
evppi.plot(order = TRUE)
class(ev_single)
ev_single <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=pars_all)
class(ev_single)
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
plot(order = TRUE)
warnings()
# Plot key parameters
plot(ev_single)
?evppi
ev_single <- ev_single %>%
mutate(pars = rep(unlist(pars_all), each = length(chemotherapy_output$k)))
# Explore EVPPI at maximum uncertainty
ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
# Plot key parameters
plotting_evppi <- ev_single %>%
filter(k == wtp.max)
ggplot(plotting_evppi, mapping = pars ~ evppi) +
geom_point()
ggplot(plotting_evppi, mapping = aes(pars ~ evppi)) +
geom_point()
ggplot(plotting_evppi, mapping = aes(pars, evppi)) +
geom_point()
ggplot(plotting_evppi, mapping = aes(evppi, pars)) +
geom_point()
# Plot key parameters
plotting_evppi <- ev_single %>%
filter(k == wtp.max) %>%
desc()
ggplot(plotting_evppi, mapping = aes(evppi, pars)) +
geom_point()
plotting_evppi
# Plot key parameters
plotting_evppi <- ev_single %>%
filter(k == wtp.max) %>%
desc(evppi)
plotting_evppi
# Plot key parameters
plotting_evppi <- ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi))
plotting_evppi
ggplot(plotting_evppi, mapping = aes(evppi, pars)) +
geom_point()
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
mutate(pars = fct_reorder(pars, desc(evppi))) %>%
ggplot(mapping = aes(evppi, pars)) +
geom_point()
### Packages
library(voi)
library(ggplot2)
library(dplyr)
library(tidyverse)
## Run the model
source("04_analysis/02_baseline_model_output.R")
## Baseline Cost-Effectiveness Formatting
# The output from the cost-effectiveness model should be formatted for
# the voi package.
# Use BCEA package to create a cost-effectiveness object.
chemotherapy_output <- list(e = m_costs_effects[, "Effects", ],
c = m_costs_effects[, "Costs", ],
k = seq(0, 50000, length.out = 501))
# EVPI
EVPI <- evpi(chemotherapy_output)
evpi.plot <- ggplot(EVPI, aes(x=k, y=evpi)) +
geom_line()
# Select the WTP on the grid that is closest to the ICER
# Represents the maximum decision uncertainty (but not necessarily the max VOI)
wtp.max <- chemotherapy_output$k[
which.min(abs(chemotherapy_output$k - ICER))
]
## Single parameter EVPPI
# Perform the calculations to determine the EVPPI for all parameters at all WTP
pars_all <- as.list(names(m_params))
ev_single <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=pars_all)
ev_single <- ev_single %>%
mutate(pars = rep(unlist(pars_all), each = length(chemotherapy_output$k)))
# Explore EVPPI at maximum uncertainty
ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
mutate(pars = fct_reorder(pars, desc(evppi))) %>%
ggplot(mapping = aes(evppi, pars)) +
geom_point()
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
mutate(pars = fct_reorder(pars, (evppi))) %>%
ggplot(mapping = aes(evppi, pars)) +
geom_point()
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
mutate(pars = fct_reorder(pars, (evppi))) %>%
ggplot(mapping = aes(evppi, pars)) +
geom_point() +
xlab("EVPPI") + ylab("Model Parameters")
ggsave("06_figs/EVPPI_ICER.pdf")
0.0475/0.001
0.0475/0.001*0.0475
### Packages
library(colorspace)
### Run the Model
source("04_analysis/01_model_run.R")
### Mean costs and effects
mean_costs_effects <- apply(m_costs_effects, c(2, 3), mean)
write.csv(mean_costs_effects, "07_tables/Mean_Costs_Effects.csv")
### Incremental Cost-Effectiveness Ratio (ICER)
ICER <- mean(m_costs_effects[, 2, 2] - m_costs_effects[, 2, 1]) /
mean(m_costs_effects[, 1, 2] - m_costs_effects[, 1, 1])
ICER
### Packages
library(colorspace)
### Run the Model
source("04_analysis/01_model_run.R")
### Mean costs and effects
mean_costs_effects <- apply(m_costs_effects, c(2, 3), mean)
write.csv(mean_costs_effects, "07_tables/Mean_Costs_Effects.csv")
### Incremental Cost-Effectiveness Ratio (ICER)
ICER <- mean(m_costs_effects[, 2, 2] - m_costs_effects[, 2, 1]) /
mean(m_costs_effects[, 1, 2] - m_costs_effects[, 1, 1])
ICER
gammaPar <- function(m,s) {
# m: Mean of Log-Normal distribution
# s: Standard deiviation of Log-Normal distribution
var <- s^2
beta <- m / var
alpha <- m * beta
return(
list(alpha = alpha, beta = beta)
)
}
## Parameters for the PSA distribution of the long-term
rate_longterm_mu <- 0.95 / 20 # 95% of individuals to die by 20 years
rate_longterm_mu
rate_longterm_sd <- sqrt(0.001)
rate_longterm_sd
### Packages
library(colorspace)
### Run the Model
source("04_analysis/01_model_run.R")
### Mean costs and effects
mean_costs_effects <- apply(m_costs_effects, c(2, 3), mean)
write.csv(mean_costs_effects, "07_tables/Mean_Costs_Effects.csv")
### Incremental Cost-Effectiveness Ratio (ICER)
ICER <- mean(m_costs_effects[, 2, 2] - m_costs_effects[, 2, 1]) /
mean(m_costs_effects[, 1, 2] - m_costs_effects[, 1, 1])
ICER
################################################################################
#### Baseline Results for Chemotherapy Model
################################################################################
### Packages
library(colorspace)
### Run the Model
source("04_analysis/01_model_run.R")
### Mean costs and effects
mean_costs_effects <- apply(m_costs_effects, c(2, 3), mean)
write.csv(mean_costs_effects, "07_tables/Mean_Costs_Effects.csv")
### Incremental Cost-Effectiveness Ratio (ICER)
ICER <- mean(m_costs_effects[, 2, 2] - m_costs_effects[, 2, 1]) /
mean(m_costs_effects[, 1, 2] - m_costs_effects[, 1, 1])
ICER
write.csv(ICER, "07_tables/ICER.csv")
### Cost-Effectiveness Acceptability Curve
colours <- rainbow_hcl(12)
m_max <- apply(m_net_benefit, c(1,3), which.max)
pdf("06_figs/CEAC.pdf")
plot(wtp_seq, apply(m_max == 2, 2, mean), type = "l", lwd = 3,
ylim = c(0,1),
col = colours[1],
xlab = "Willingness-to-pay",
ylab = "Probability of Cost Effectiveness for Treatment 2",
main = "Cost Effectiveness Acceptability Curve")
dev.off()
### Cost-Effectiveness Acceptability Frontier
m_ceaf <- cbind(apply(m_max == 1, 2, mean), apply(m_max == 2, 2, mean))
pdf("06_figs/CEAF.pdf")
plot(wtp_seq, m_ceaf[, 2], type = "l", lwd = 3,
ylim = c(0,1),
col = colours[1],
xlab = "Willingness-to-pay",
ylab = "Probability of Cost Effectiveness",
main = "Cost Effectiveness Acceptability Frontier")
points(wtp_seq, m_ceaf[, 1], type = "l", col = colours[7], lwd = 3)
v_optimal_treatment <- apply(apply(m_net_benefit, c(2,3), mean), 2, which.max)
v_ceaf <- vector(length = n_wtp)
for(i in 1:n_wtp){
v_ceaf[i] <- m_ceaf[i, v_optimal_treatment[i]]
}
points(wtp_seq, v_ceaf, pch = 19, cex = 0.5)
points(wtp_seq, v_ceaf, pch = 0)
legend("bottomright", c("Treatment 1", "Treatment 2", "Frontier"),
lwd = c(2, 2, NA), pch = c(NA, NA, 0),
col = c(colours[1], colours[7], "black"))
dev.off()
### Baseline willingness to pay = 20000
baseline_wtp <- which(wtp_seq == 20000)
# Average net benefit
mean_net_benefit <- apply(m_net_benefit[, , baseline_wtp], 2, mean)
mean_net_benefit
names(mean_net_benefit) <- c("Treatment 1", "Treatment 2")
mean_net_benefit / 20000
write.csv(mean_net_benefit, "07_tables/Mean_Net_Benefit.csv")
# INB
INB <- diff(mean_net_benefit)
INB
q_INB <- quantile(apply(m_net_benefit[, , baseline_wtp], 1, diff), prob = c(0.025, 0.975))
q_INB
# Optimal treatment
d_star <-  which.max(mean_net_benefit)
d_star
###########################################################
### Expected Value of Perfect Information Analysis      ###
###########################################################
### Packages
library(voi)
## Run the model
source("04_analysis/01_model_run.R")
## Expected Value of Perfect Information - single WTP
# Specify willingness to pay
wtp_fix = 20000
# Calculate EVPI from net benefit
evpi(m_net_benefit[ , , wtp_seq == wtp_fix])
## Baseline Cost-Effectiveness Formatting
# The output from the cost-effectiveness model should be formatted for
# the voi package.
# Use BCEA package to create a cost-effectiveness object.
chemotherapy_output <- list(e = m_costs_effects[, "Effects", ],
c = m_costs_effects[, "Costs", ],
k = seq(0, 50000, length.out = 501))
## Expected Value of Perfect Information
# Calculate
EVPI <- evpi(chemotherapy_output)
# WTP = 20000
EVPI$evpi[EVPI$k == wtp_fix]
# Plot
pdf("06_figs/EVPI.pdf")
plot(EVPI,
xlab = "Willingness-to-Pay",
ylab = "EVPI",
main = "Expected Value of Perfect Information",
type = "l")
dev.off()
## Baseline Cost-Effectiveness Formatting
# The output from the cost-effectiveness model should be formatted for
# the voi package.
# Use BCEA package to create a cost-effectiveness object.
chemotherapy_output <- list(e = m_costs_effects[, "Effects", ],
c = m_costs_effects[, "Costs", ],
k = seq(0, 50000, length.out = 501))
wtp.max <- chemotherapy_output$k[
which.min(abs(chemotherapy_output$k - ICER))
]
## Single parameter EVPPI
# Perform the calculations to determine the EVPPI for all parameters at all WTP
pars_all <- as.list(names(m_params))
ev_single <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=pars_all)
ev_single <- ev_single %>%
mutate(pars = rep(unlist(pars_all), each = length(chemotherapy_output$k)))
# Explore EVPPI at maximum uncertainty
ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
mutate(pars = fct_reorder(pars, (evppi))) %>%
ggplot(mapping = aes(evppi, pars)) +
geom_point() +
xlab("EVPPI") + ylab("Model Parameters")
## Run the model
source("04_analysis/02_baseline_model_output.R")
## Baseline Cost-Effectiveness Formatting
# The output from the cost-effectiveness model should be formatted for
# the voi package.
# Use BCEA package to create a cost-effectiveness object.
chemotherapy_output <- list(e = m_costs_effects[, "Effects", ],
c = m_costs_effects[, "Costs", ],
k = seq(0, 50000, length.out = 501))
# EVPI
EVPI <- evpi(chemotherapy_output)
evpi.plot <- ggplot(EVPI, aes(x=k, y=evpi)) +
geom_line()
# Select the WTP on the grid that is closest to the ICER
# Represents the maximum decision uncertainty (but not necessarily the max VOI)
wtp.max <- chemotherapy_output$k[
which.min(abs(chemotherapy_output$k - ICER))
]
## Single parameter EVPPI
# Perform the calculations to determine the EVPPI for all parameters at all WTP
pars_all <- as.list(names(m_params))
ev_single <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=pars_all)
ev_single <- ev_single %>%
mutate(pars = rep(unlist(pars_all), each = length(chemotherapy_output$k)))
# Explore EVPPI at maximum uncertainty
ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
# Plot key parameters
ev_single %>%
filter(k == wtp.max) %>%
mutate(pars = fct_reorder(pars, (evppi))) %>%
ggplot(mapping = aes(evppi, pars)) +
geom_point() +
xlab("EVPPI") + ylab("Model Parameters")
ggsave("06_figs/EVPPI_ICER.pdf")
## Calculate standard errors
pars_small <- list("u_home_care", "u_hospital", "p_home_recover", "lambda_home")
nb <- wtp.max * chemotherapy_output$e - chemotherapy_output$c
ev_small_se <- evppi(outputs=nb, inputs=m_params, pars=pars_small,
se = TRUE)
colnames(m_params)
## Calculate standard errors
pars_small <- list("u_home_care", "u_hospital", "lambda_home", "lambda_hosp")
nb <- wtp.max * chemotherapy_output$e - chemotherapy_output$c
ev_small_se <- evppi(outputs=nb, inputs=m_params, pars=pars_small,
se = TRUE)
ev_small_se
# Plot key parameters across WTP
EVPI <- EVPI %>%
mutate(pars = "all_parameters")
EVPI
ev_single %>%
filter(pars %in%c("logor_side_effects",
"p_home_recover",
"u_home_care",
"u_hospital",
"lambda_home",
"p_home_home",
"p_side_effects_t1")) %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw()
# Explore EVPPI at maximum uncertainty
ev_single %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
ev_single %>%
filter(pars %in%c("logor_side_effects",
"rate_longterm",
"u_home_care",
"p_side_effects_t2",
"lambda_hosp",
"u_hospital",
"u_recovery")) %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw()
ev_single %>%
filter(pars %in%c("logor_side_effects",
"rate_longterm",
"u_home_care",
"p_side_effects_t2",
"lambda_hosp",
"u_hospital",
"u_recovery")) %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw() +
xlab("Willingness-to-Pay") +
ylab("Value of Information") +
guides(fill=guide_legend(title="Parameters"))
ev_single %>%
filter(pars %in%c("logor_side_effects",
"rate_longterm",
"u_home_care",
"p_side_effects_t2",
"lambda_hosp",
"u_hospital",
"u_recovery")) %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw() +
xlab("Willingness-to-Pay") +
ylab("Value of Information") +
labs(color = "Parameters")
ggsave("06_figs/EVPPI_WTP.pdf")
## EVPPI Groups
# Randomised Trial
par_RCT <- list(
"side_effects" = c("logor_side_effects"),
"side_effects_and_follow_up" = c("logor_side_effects",
"p_hospitalised_total","p_died",
"lambda_home","lambda_hosp")
)
ev_RCT <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=par_RCT)
# Explore at maximum willingness to pay
ev_RCT %>%
filter(k == wtp.max)
# Explore across willingness to pay
ev_RCT %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw()
ev_RCT
# Explore at maximum willingness to pay
ev_RCT %>%
filter(k == wtp.max)
par_RCT
ev_RCT
table(ev_RCT$pars)
par_RCT
# Explore at maximum willingness to pay
ev_RCT %>%
mutate(pars = ifelse("logor_side_effects,p_hospitalised_total,p_died,lambda_home,lambda_hosp",
"side_effects_and_follow_up", pars)) %>%
filter(k == wtp.max)
# Explore at maximum willingness to pay
ev_RCT %>%
mutate(pars = ifelse(pars == "logor_side_effects,p_hospitalised_total,p_died,lambda_home,lambda_hosp",
"side_effects_and_follow_up", pars)) %>%
filter(k == wtp.max)
# Explore across willingness to pay
ev_RCT %>%
mutate(pars = ifelse(pars == "logor_side_effects,p_hospitalised_total,p_died,lambda_home,lambda_hosp",
"side_effects_and_follow_up", pars)) %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw()
ggsave("06_figs/EVPPI_RCT.pdf")
# All Studies
par_groups <- list(
"side_effects" = c("logor_side_effects"),
"hosp_trans_probs" = c("p_died","lambda_hosp"),
"trans_probs" = c("p_side_effects_t1", "p_hospitalised_total",
"lambda_home", "p_died","lambda_hosp"),
"side_effects_and_follow_up" = c("logor_side_effects", "p_hospitalised_total",
"p_died","lambda_home","lambda_hosp"),
"costs" = c("c_home_care","c_hospital","c_death"),
"utilities" = c("u_recovery","u_home_care","u_hospital")
)
ev_groups <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=par_groups)
# All Studies
par_groups <- list(
"side_effects" = c("logor_side_effects"),
"longterm_surv" = c("rate_longterm"),
"hosp_trans_probs" = c("p_died","lambda_hosp"),
"trans_probs" = c("p_side_effects_t1", "p_hospitalised_total",
"lambda_home", "p_died","lambda_hosp"),
"side_effects_and_follow_up" = c("logor_side_effects", "p_hospitalised_total",
"p_died","lambda_home","lambda_hosp"),
"costs" = c("c_home_care","c_hospital","c_death"),
"utilities" = c("u_recovery","u_home_care","u_hospital")
)
ev_groups <- evppi(outputs=chemotherapy_output, inputs=m_params, pars=par_groups)
# Explore EVPPI at maximum uncertainty
ev_groups %>%
filter(k == wtp.max) %>%
arrange(desc(evppi)) %>%
mutate(evppi = round(evppi, 2))
# Plot key parameters
ev_groups %>%
filter(k == wtp.max) %>%
plot(order = TRUE)
# Plot all groups across WTP
ev_groups %>%
ggplot(aes(x=k, y=evppi, group=pars, col = pars)) +
geom_line() +
geom_line(data = EVPI, aes(x = k, y = evpi), linetype = "dashed") +
theme_bw()
## Population Level EVPPI
pop_size <- 46000 * c(sum(1 / (1 + 0.035)^(0:5)),
sum(1 / (1 + 0.035)^(0:10)),
sum(1 / (1 + 0.035)^(0:15)))
ev_groups  %>%
filter(k == 20000) %>%
arrange(desc(evppi)) %>%
mutate(evppi_5Y = evppi * pop_size[1],
evppi_10Y = evppi * pop_size[2],
evppi_15Y = evppi * pop_size[3])
