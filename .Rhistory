a = -Inf, b = 1)
X_hospital_mean1[i] <- gm_mean(X_hospital[i, ])
X_hospital_mean2[i] <- gm_mean(1 - X_hospital[i, ])
}
data_save_dat <- data.frame(cbind(X_hospital_mean1 = X_hospital_mean1,
X_hospital_mean2 = X_hospital_mean2))
return(data_save_dat)
}
# Analysis function based on JAGS
utility_analysis_fn <- function(data, args, pars){
# Create the data list for JAGS
data_jags <- list(X_recovery = as.vector(as.matrix(data[, (1:args$n)])),
X_home_care = as.vector(as.matrix(data[, args$n + (1:args$n)])),
X_hospital = as.vector(as.matrix(data[, 2*args$n + (1:args$n)])),
n = args$n,
alpha_recovery = args$betaPar(
args$u_recovery_mu,
args$u_recovery_sd
)$alpha,
beta_recovery = args$betaPar(
args$u_recovery_mu,
args$u_recovery_sd
)$beta,
alpha_home_care = args$betaPar(
args$u_home_care_mu,
args$u_home_care_sd
)$alpha,
beta_home_care = args$betaPar(
args$u_home_care_mu,
args$u_home_care_sd
)$beta,
alpha_hospital = args$betaPar(
args$u_hospital_mu,
args$u_hospital_sd
)$alpha,
beta_hospital = args$betaPar(
args$u_hospital_mu,
args$u_hospital_sd
)$beta)
trial <- function(){
for(i in 1:n){
X_recovery[i] ~ dnorm(u_recovery, tau_recovery);T(, 1.00001)
X_home_care[i] ~ dnorm(u_home_care, tau_home_care);T(, 1.00001)
X_hospital[i] ~ dnorm(u_hospital, tau_hospital);T(, 1.00001)
}
u_recovery ~ dbeta(alpha_recovery, beta_recovery)
u_home_care ~ dbeta(alpha_home_care, beta_home_care)
u_hospital ~ dbeta(alpha_hospital, beta_hospital)
sd_recovery ~ dunif(0.000001, 0.15)
sd_home_care ~ dunif(0.00001, 0.6)
sd_hospital ~ dunif(0.00001, 0.4)
tau_recovery <- 1 / sd_recovery ^ 2
tau_home_care <- 1 / sd_home_care ^ 2
tau_hospital <- 1 / sd_hospital ^ 2
}
filein <- file.path(tempdir(),fileext="datmodel.txt")
R2OpenBUGS::write.model(trial,filein)
# Perform the MCMC simulation with OpenBUGS.
# Close OpenBUGS once it has finished (if debug is set to TRUE)
bugs.data <- jags(
data =  data_jags,
parameters.to.save = pars,
model.file = filein,
n.chains = 1,
n.iter = args$n.iter,
n.thin = 1,
n.burnin = 250, progress.bar = "none")
return(data.frame(u_recovery = bugs.data$BUGSoutput$sims.matrix[, "u_recovery"],
u_home_care = bugs.data$BUGSoutput$sims.matrix[, "u_home_care"],
u_hospital = bugs.data$BUGSoutput$sims.matrix[, "u_hospital"]))
}
library(voi)
?evsi
library(truncnorm)
?dtruncnorm
m_params
m_params_aug <- m_params
m_params_aug$sd_iid_hospital <- runif(dim(m_params_aug)[1], 0.00001, 0.4)
data_sim <- utility_datagen_fn_is(m_params_aug)
# Data generation function - Importance Sampling
utility_datagen_fn_is <- function(inputs, n = 20){
# Load the data
X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Simulate the utility
X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
}
data_save_dat <- data.frame(cbind(X_hospital = X_hospital))
return(data_save_dat)
}
data_sim <- utility_datagen_fn_is(m_params_aug)
data_sim
data_sim[1, ]
i <- 1
inputs <- m_params_aug
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
m_hospital
sd_hospital
truncnorm::dtruncnorm(data_sim[1, ], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1,
)
truncnorm::dtruncnorm(data_sim[1, ], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
log(truncnorm::dtruncnorm(data_sim[1, ], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1))
sum(log(truncnorm::dtruncnorm(data_sim[1, ], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)))
exp(sum(log(truncnorm::dtruncnorm(data_sim[1, ], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1))))
rm(inputs)
# Likelihood function
utility_likelihood <- function(data, inputs){
# Load the data
ll <- vector("numeric", dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Calculate the likelihood
ll[i] <- exp(
sum(
log(
truncnorm::dtruncnorm(data, mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
)))
}
return(ll)
}
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
debug(evsi)
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
debug(form_likelihood)
formals(likelihood)
check_likelihood
likelihood
inputs
datagen_fn
pars
check_likelihood
debug(check_likelihood)
data_sim
data_sim
likelihood(data_sim, inputs = inputs)
debug(likelihood)
likelihood(data_sim, inputs = inputs)
m_hospital
sd_hospital
data
exp(sum(log(truncnorm::dtruncnorm(data, mean = m_hospital,
sd = sd_hospital, a = -Inf, b = 1))))
truncnorm::dtruncnorm(data, mean = m_hospital,
sd = sd_hospital, a = -Inf, b = 1))
# Likelihood function
utility_likelihood <- function(data, inputs){
# Load the data
ll <- vector("numeric", dim(inputs)[1])
if(class(data) == matrix){
data <- data[1, ]
}
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Calculate the likelihood
ll[i] <- exp(
sum(
log(
truncnorm::dtruncnorm(data, mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
)))
}
return(ll)
}
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
F
r
R
undebug(evsi)
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
debug(likelihood)
class(data)
# Likelihood function
utility_likelihood <- function(data, inputs){
# Load the data
ll <- vector("numeric", dim(inputs)[1])
if(class(data) == "data.frame"){
data <- data[1, ]
}
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Calculate the likelihood
ll[i] <- exp(
sum(
log(
truncnorm::dtruncnorm(data, mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
)))
}
return(ll)
}
## Regression Based Method
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params,
pars = c("u_hospital"),
n = seq(50, 1000, by = 200),
method = "gam",
datagen_fn = utility_datagen_fn_rb)
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug,
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
ret
## Importance Sampling
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug[1:100, ],
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = 50,
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
chemotherapy_output
## Importance Sampling
chemotherapy_output_red <- chemotherapy_output
chemotherapy_output_red$e <- chemotherapy_output_red$e[1:100, ]
chemotherapy_output_red$c <- chemotherapy_output_red$c[1:100, ]
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params_aug[1:100, ],
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = 50,
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
evsi_utility <- evsi(outputs = chemotherapy_output_red,
inputs = m_params_aug[1:100, ],
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = 50,
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
undebug(form_likelihood)
evsi_utility
plot(evsi_utility$k, evsi_utility$evsi)
chemotherapy_output_red <- chemotherapy_output
chemotherapy_output_red$e <- chemotherapy_output_red$e[1:1000, ]
chemotherapy_output_red$c <- chemotherapy_output_red$c[1:1000, ]
evsi_utility <- evsi(outputs = chemotherapy_output_red,
inputs = m_params_aug[1:1000, ],
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = 50,
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
undebug(check_likelihood)
plot(evsi_utility$k, evsi_utility$evsi)
# EVSI calculation using GAM regression.
evsi_OR <- evsi(outputs = chemotherapy_output,
inputs = m_params,
pars = c("logor_side_effects"),
pars_datagen = c("p_side_effects_t1", "p_side_effects_t2"),
n = seq(50, 500, by = 10),
method = "gam")
### Default
# EVSI calculation using GAM regression.
evsi_OR <- evsi(outputs = chemotherapy_output,
inputs = m_params,
study = "trial_binary",
pars = c("p_side_effects_t1", "p_side_effects_t2"),
n = seq(50, 500, by = 10),
method = "gam")
evsi_default_rb <- evsi(outputs = chemotherapy_output,
inputs = m_params,
study = "trial_binary",
pars = c("p_side_effects_t1", "p_side_effects_t2"),
n = seq(50, 500, by = 50),
method = "gam")
# EVSI calculating using Importance Sampling
evsi_default_is <- evsi(outputs = chemotherapy_output,
inputs = m_params,
study = "trial_binary",
pars = c("p_side_effects_t1", "p_side_effects_t2"),
n = seq(50, 500, by = 50),
method = "gam")
evsi_default_is <- evsi(outputs = chemotherapy_output,
inputs = m_params,
study = "trial_binary",
pars = c("p_side_effects_t1", "p_side_effects_t2"),
n = seq(50, 500, by = 50),
method = "is")
evsi_default_is$n %>% table()
table(evsi_default_is$n)
# Beta prior for standard care is set using the number of events
beta_params_t1 <- c(1 + n_side_effects,
1 + n_patients - n_side_effects)
# Beta prior for the novel intervention is approximated from the mean and
# standard deviation of the PA distribution for the probability of side effects.
beta_params_t2 <- betaPar(mean(m_params$p_side_effects_t2),
sd(m_params$p_side_effects_t2))
# EVSI calculation with moment matching method
evsi_default_mm <- evsi(outputs = chemotherapy_output,
inputs = m_params,
study = "trial_binary",
pars = c("p_side_effects_t1", "p_side_effects_t2"),
n = seq(50, 500, by = 50),
method = "mm",
model_fn = calculate_costs_effects,
analysis_args = list(a1 = beta_params_t1[1],
b1 = beta_params_t1[2],
a2 = beta_params_t2$alpha,
b2 = beta_params_t2$beta),
par_fn = generate_psa_parameters)
utility_datagen_fn_mm <- function(inputs, n = 20,
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.4))}
){
# Load the data
X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- sd_hospital_fun()
# Simulate the utility
X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
}
data_save_dat <- data.frame(cbind(X_hospital = X_hospital))
return(data_save_dat)
}
# Data generation function - Regression Based
utility_datagen_fn_rb <- function(inputs, n = 500,
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.4))}
){
# Load the data
X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
X_hospital_mean <- vector("numeric", length = dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- sd_hospital_fun()
# Simulate the costs
X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
X_hospital_mean[i] <- mean(X_hospital[i, ])
}
data_save_dat <- data.frame(cbind(X_hospital_mean = X_hospital_mean))
return(data_save_dat)
}
# Data generation function - Moment Matching
utility_datagen_fn_mm <- function(inputs, n = 20,
sd_hospital_fun = function(){return(runif(1, 0.00001, 0.4))}
){
# Load the data
X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- sd_hospital_fun()
# Simulate the utility
X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
}
data_save_dat <- data.frame(cbind(X_hospital = X_hospital))
return(data_save_dat)
}
# Data generation function - Importance Sampling
utility_datagen_fn_is <- function(inputs, n = 500){
# Load the data
X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Simulate the utility
X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
}
data_save_dat <- data.frame(cbind(X_hospital = X_hospital))
return(data_save_dat)
}
# Data generation function - Importance Sampling
utility_datagen_fn_is <- function(inputs, n = 500){
# Load the data
X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", dim(inputs)[1])
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Simulate the utility
X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
}
data_save_dat <- data.frame(cbind(X_hospital = X_hospital))
return(data_save_dat)
}
## Regression Based Method
evsi_utility <- evsi(outputs = chemotherapy_output,
inputs = m_params,
pars = c("u_hospital"),
n = seq(50, 1000, by = 200),
method = "gam",
datagen_fn = utility_datagen_fn_rb)
# Likelihood function
utility_likelihood <- function(data, inputs){
# Load the data
ll <- vector("numeric", dim(inputs)[1])
if(class(data) == "data.frame"){
data <- data[1, ]
}
for(i in 1:dim(inputs)[1]){
set.seed(123 + i)
m_hospital <- inputs[i, "u_hospital"]
sd_hospital <- inputs[i, "sd_iid_hospital"]
# Calculate the likelihood
ll[i] <- exp(
sum(
log(
truncnorm::dtruncnorm(data, mean = m_hospital, sd = sd_hospital,
a = -Inf, b = 1)
)))
}
return(ll)
}
# Add individual level standard deviation
m_params_aug <- m_params
m_params_aug$sd_iid_hospital <- runif(dim(m_params)[1], 0.00001, 0.4)
# Importance Sampling - EVSI
evsi_utility <- evsi(outputs = chemotherapy_output_red,
inputs = m_params_aug[1:1000, ],
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = 50,
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
# Importance Sampling - EVSI
evsi_utility <- evsi(outputs = chemotherapy_output_red,
inputs = m_params_aug[1:1000, ],
pars = c("u_hospital"),
pars_datagen = c("u_hospital", "sd_iid_hospital"),
n = seq(50, 1000, by = 200),
method = "is",
datagen_fn = utility_datagen_fn_is,
likelihood = utility_likelihood)
