delta <- rbeta(S, 0.5 + X_control[s], 0.5 + N - X_control[s]) -
rbeta(S, 0.5 + X_treatment[s], 0.5 + N - X_treatment[s])
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
X_control_s <- X_control[s]
X_treatment_s <- X_treatment[s]
N_tot <- N
i <- 1
while(!((equi > 0.9) | (fut < 0.01) | (fut > 0.99))){
X_control_s <- X_control_s + rbinom(1, N_tot, p_control)
X_treatment_s <- X_treatment_s + rbinom(1, N_tot, p_treatment)
N_tot <- N_tot + N_interim
delta <- rbeta(S, 0.5 + X_control_s, 0.5 + N_tot - X_control_s) -
rbeta(S, 0.5 + X_treatment_s, 0.5 + N_tot - X_treatment_s)
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
i <- i + 1
}
delta_mean[s] <- mean(delta)
number_interim[s] <- i
sample_size[s] <- N_tot
}
rbinom(1, N_tot, p_control)
S <- 10
p_control <- 0.35
p_treatment <- 0.35
N <- 50
N_interim <- 20
X_control <- rbinom(S, N, p_control)
X_treatment <- rbinom(S, N, p_treatment)
delta_mean <- number_interim <- sample_size <- vector("numeric", S)
for(s in 1:S){
delta <- rbeta(S, 0.5 + X_control[s], 0.5 + N - X_control[s]) -
rbeta(S, 0.5 + X_treatment[s], 0.5 + N - X_treatment[s])
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
X_control_s <- X_control[s]
X_treatment_s <- X_treatment[s]
N_tot <- N
i <- 1
while(!((equi > 0.9) | (fut < 0.01) | (fut > 0.99))){
X_control_s <- X_control_s + rbinom(1, N_tot, p_control)
X_treatment_s <- X_treatment_s + rbinom(1, N_tot, p_treatment)
N_tot <- N_tot + N_interim
delta <- rbeta(S, 0.5 + X_control_s, 0.5 + N_tot - X_control_s) -
rbeta(S, 0.5 + X_treatment_s, 0.5 + N_tot - X_treatment_s)
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
i <- i + 1
}
delta_mean[s] <- mean(delta)
number_interim[s] <- i
sample_size[s] <- N_tot
}
p_treatment
X_treatment_s
rbinom(1, N_tot, p_treatment)
X_treatment_s
X_treatment_s
N_tot
S <- 10
p_control <- 0.35
p_treatment <- 0.35
N <- 50
N_interim <- 20
X_control <- rbinom(S, N, p_control)
X_treatment <- rbinom(S, N, p_treatment)
delta_mean <- number_interim <- sample_size <- vector("numeric", S)
for(s in 1:S){
delta <- rbeta(S, 0.5 + X_control[s], 0.5 + N - X_control[s]) -
rbeta(S, 0.5 + X_treatment[s], 0.5 + N - X_treatment[s])
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
X_control_s <- X_control[s]
X_treatment_s <- X_treatment[s]
N_tot <- N
i <- 1
while(!((equi > 0.9) | (fut < 0.01) | (fut > 0.99))){
X_control_s <- X_control_s + rbinom(1, N_interim, p_control)
X_treatment_s <- X_treatment_s + rbinom(1, N_interim, p_treatment)
N_tot <- N_tot + N_interim
delta <- rbeta(S, 0.5 + X_control_s, 0.5 + N_tot - X_control_s) -
rbeta(S, 0.5 + X_treatment_s, 0.5 + N_tot - X_treatment_s)
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
i <- i + 1
}
delta_mean[s] <- mean(delta)
number_interim[s] <- i
sample_size[s] <- N_tot
}
S <- 500
p_control <- 0.35
p_treatment <- 0.35
N <- 50
N_interim <- 20
X_control <- rbinom(S, N, p_control)
X_treatment <- rbinom(S, N, p_treatment)
delta_mean <- number_interim <- sample_size <- vector("numeric", S)
for(s in 1:S){
delta <- rbeta(S, 0.5 + X_control[s], 0.5 + N - X_control[s]) -
rbeta(S, 0.5 + X_treatment[s], 0.5 + N - X_treatment[s])
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
X_control_s <- X_control[s]
X_treatment_s <- X_treatment[s]
N_tot <- N
i <- 1
while(!((equi > 0.9) | (fut < 0.01) | (fut > 0.99))){
X_control_s <- X_control_s + rbinom(1, N_interim, p_control)
X_treatment_s <- X_treatment_s + rbinom(1, N_interim, p_treatment)
N_tot <- N_tot + N_interim
delta <- rbeta(S, 0.5 + X_control_s, 0.5 + N_tot - X_control_s) -
rbeta(S, 0.5 + X_treatment_s, 0.5 + N_tot - X_treatment_s)
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
i <- i + 1
}
delta_mean[s] <- mean(delta)
number_interim[s] <- i
sample_size[s] <- N_tot
}
N_tot
mean(delta)
sample_size
number_interim
mean(delta)
S <- 2000
p_control <- 0.35
p_treatment <- 0.35
N <- 50
N_interim <- 20
X_control <- rbinom(S, N, p_control)
X_treatment <- rbinom(S, N, p_treatment)
delta_mean <- number_interim <- sample_size <- vector("numeric", S)
for(s in 1:S){
delta <- rbeta(S, 0.5 + X_control[s], 0.5 + N - X_control[s]) -
rbeta(S, 0.5 + X_treatment[s], 0.5 + N - X_treatment[s])
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
X_control_s <- X_control[s]
X_treatment_s <- X_treatment[s]
N_tot <- N
i <- 1
while(!((equi > 0.9) | (fut < 0.01) | (fut > 0.99))){
X_control_s <- X_control_s + rbinom(1, N_interim, p_control)
X_treatment_s <- X_treatment_s + rbinom(1, N_interim, p_treatment)
N_tot <- N_tot + N_interim
delta <- rbeta(S, 0.5 + X_control_s, 0.5 + N_tot - X_control_s) -
rbeta(S, 0.5 + X_treatment_s, 0.5 + N_tot - X_treatment_s)
equi <- mean((delta < 0.05) & (delta > -0.05))
fut <- mean(delta >= 0)
i <- i + 1
}
delta_mean[s] <- mean(delta)
number_interim[s] <- i
sample_size[s] <- N_tot
}
mean(delta)
number_interim
sample_size
pwr.prop.test
power.prop.test
?power.prop.test
power.prop.test(p1 = 0.319, p2 = 0.319 - 0.1, power = 0.9)
power.prop.test(p1 = 0.319, p2 = 0.291, power = 0.9)
power.prop.test(p1 = 1 - 0.6, p2 = 1 - 0.66, power = 0.9)
power.prop.test(p1 = 0.6, p2 = 0.66, power = 0.9)
power.prop.test(p1 = 0.6, p2 = 0.66, power = 0.8)
power.prop.test(p1 = 0.6, p2 = 0.71, power = 0.8)
power.prop.test(p1 = 1-0.319, p2 = 1-23.1, power = 0.8)
power.prop.test(p1 = 1-0.319, p2 = 1-0.231, power = 0.8)
power.prop.test(p1 = 1-0.319, p2 = 1-0.231, power = 0.89
power.prop.test(p1 = 1-0.319, p2 = 1-0.231, power = 0.9)
power.prop.test(p1 = 1-0.319, p2 = 1-0.231, power = 0.9)
power.prop.test(p1 = 0.6, p2 = 0.71, power = 0.9)
power.prop.test(p1 = 1-0.319, p2 = 1-0.231, power = 0.9)
539/0.8
power.t.test(n = 539, delta = 5, sd = 6.9)
# PHQ-9
power.t.test(n = 539, delta = 5, sd = 6.0)
# ASQ
power.t.test(n = 539, delta = 1, sd = 1)
## SDQ
power.t.test(n = 539, delta = 2, sd = 5.49)
## Assuming missingness
539 / 0.9
539 / 0.85
539 / 0.8
539 / 0.75
1-0.319
1-0.231
0.319-0.231
539 / 0.9
539 / 0.85
539 / 0.8
539 / 0.75
library(dplyr)
library(catfun)
## Read data from fil
data <- readxl::read_xlsx("C:/Users/evans/Documents/Anna/SickKids/Statistical Support/Ajoy NRF1/NF1 condensed database.xlsx")
## Manipulate data
data <- data  %>%
mutate(CA30or50 = as.factor(`CA 30 or 50d`), # Character to Factor
CA30 = as.factor(`CA 30d`), # Character to Factor
CA50 = as.factor(`CA 50d`), # Character to Factor
LN = as.factor(`LN`), # Character to Factor
Diagnosis = as.factor(`Diagnosis`), # Character to Factor
FH = as.factor(`Family history (FH)`), # Character to Factor
OPG = as.factor(`OPG`), # Character to Factor
Age = `Age at exam (y)`) %>% # Rename so no spaces in variable name
mutate(CA50 = ifelse(CA50 == "-", NA, CA50), # Replace missing values
CA50 = factor(CA50, labels = c("No","Yes"))) %>% # Character to Factor
select(CA30or50, CA30, CA50, LN, Diagnosis, FH, OPG, Age) # Maintain variables
data$Age %>%
table()
data$Age %>% table() < 5
mean(data$Age %>% table() < 5)
mean(data$Age %>% table() < = 5)
mean(data$Age %>% table() <= 5)
data %>%
summarise(Age, Diagnosis)
data %>%
group_by(Age, Diagnosis) %>%
summarise(n = n())
data %>%
group_by(Age, Diagnosis) %>%
summarise(n = n()) %>%
View()
data %>%
group_by(Age, Diagnosis) %>%
summarise(n = n()) %>%
write.csv("C:/Users/evans/Documents/Anna/SickKids/Statistical Support/Ajoy NRF1/Age.csv")
citation()
?p.adjust
# EDI
power.prop.test(p1 = 0.6, p2 = 0.66, power = 0.9)
# EDI
power.prop.test(p1 = 0.6, p2 = 0.71, power = 0.9)
power.prop.test(p1 = 0.6, p2 = 0.71, power = 0.9)
390 / 0.9
390 / 0.85
390 / 0.8
390 / 0.75
power.t.test(n = 390, delta = 5, sd = 6.0)
power.t.test(n = 390, delta = 1, sd = 1)
power.t.test(n = 390, delta = 2, sd = 5.49)
## SDQ
power.t.test(n = 539, delta = 2, sd = 5.49)
390 / 0.9
390 / 0.85
390 / 0.9
390 / 0.85
390 / 0.8
390 / 0.75
source('C:/Users/evans/Downloads/rfile_1.R')
2
2 +2
source('C:/Users/evans/Downloads/rfile_8.R')
# EDI
power.prop.test(p1 = 1 - 0.319, p2 = 1 - 0.231, power = 0.9)
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 1, 4)
# Sample Size
N <- 100
# Simulation Size
S <- 1000
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 1, 4)
SoC_Prior
hist(SoC_Prior)
hist(NI_Prior, add = TRUE, col = "red")
NI_Prior <- rbeta(S, 4, 1)
hist(SoC_Prior)
hist(NI_Prior, add = TRUE, col = "red")
NI_Prior <- rbeta(S, 3, 1)
hist(SoC_Prior)
hist(NI_Prior, add = TRUE, col = "red")
# Sample Size
N <- 100
# Simulation Size
S <- 1000
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 3, 1)
# Data
SoC_X <- rbinom(N, 1, SoC_Prior[i])
NI_X <- rbinom(N, 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
HDInterval::hdi(TE_Posterior)
i <- 1
# Data
SoC_X <- rbinom(N, 1, SoC_Prior[i])
NI_X <- rbinom(N, 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
HDInterval::hdi(TE_Posterior)
# Length 95% CI
diff(HDInterval::hdi(TE_Posterior))
# Sample Size
N <- 100
# Simulation Size
S <- 1000
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 3, 1)
AL <- vector(NA, length = S)
for(i in 1:S){
# Data
SoC_X <- rbinom(N, 1, SoC_Prior[i])
NI_X <- rbinom(N, 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
AL[i] <- diff(HDInterval::hdi(TE_Posterior))
}
AL <- vector(NA, length = S)
AL <- vector("numeric", length = S)
for(i in 1:S){
# Data
SoC_X <- rbinom(N, 1, SoC_Prior[i])
NI_X <- rbinom(N, 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
AL[i] <- diff(HDInterval::hdi(TE_Posterior))
}
AL
mean(AL)
AL <- mean(Length_95CI)
# Sample Size
N <- 100
# Simulation Size
S <- 1000
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 3, 1)
AL <- vector("numeric", length = S)
Length_95CI <- vector("numeric", length = S)
for(i in 1:S){
# Data
SoC_X <- rbinom(N, 1, SoC_Prior[i])
NI_X <- rbinom(N, 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
Length_95CI[i] <- diff(HDInterval::hdi(TE_Posterior))
}
AL <- mean(Length_95CI)
AL
# Sample Size
N <- seq(20, 250, by = 10)
N
# Simulation Size
S <- 1000
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 3, 1)
# Sample Size
N <- seq(20, 250, by = 10)
AL <- vector("numeric", length = length(N))
j <- 1
for(n in N){
Length_95CI <- vector("numeric", length = S)
for(i in 1:S){
# Data
SoC_X <- rbinom(N, 1, SoC_Prior[i])
NI_X <- rbinom(N, 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
Length_95CI[i] <- diff(HDInterval::hdi(TE_Posterior))
}
AL[j] <- mean(Length_95CI)
j <- j + 1
}
# Simulation Size
S <- 1000
# Priors
SoC_Prior <- rbeta(S, 2, 3)
NI_Prior <- rbeta(S, 3, 1)
# Sample Size
N <- seq(20, 250, by = 10)
AL <- vector("numeric", length = length(N))
j <- 1
for(n in N){
Length_95CI <- vector("numeric", length = S)
for(i in 1:S){
# Data
SoC_X <- rbinom(N[j], 1, SoC_Prior[i])
NI_X <- rbinom(N[j], 1, NI_Prior[i])
# Posterior
SoC_Posterior <- rbeta(S, 2 + sum(SoC_X), 3 + N[j] - sum(SoC_X))
NI_Posterior <- rbeta(S, 3 + sum(NI_X), 1 + N[j] - sum(NI_X))
# Posterior - Treatment Effect (Risk Difference)
TE_Posterior <- NI_Posterior - SoC_Posterior
# Length 95% CI
Length_95CI[i] <- diff(HDInterval::hdi(TE_Posterior))
}
AL[j] <- mean(Length_95CI)
j <- j + 1
}
plot(AL, N)
plot(N, AL)
AL
cbind(N, AL)
# Priors
rmultinom(S, 1, c(0.25, 0.25, 0.25, 0.25))
# Priors
select <- rmultinom(S, 1, c(0.25, 0.25, 0.25, 0.25))
p_death_UC <- 0.2
p_death_DPL <- 0.2
p_death_LDPV <- 0.2
### Data Simulation
# 3 Arm Domain
# Usual Care - UC
# DPL
# LDPV
library(boot)
# Calculate probabilities
p_death_DPL <- inv.logit(logit(p_death_UC) + log(OR_DPL))
## Everything Equal
p_death_UC <- 0.2
OR_DPL <- 1
OR_LDPV <- 1
# Calculate probabilities
# p = inv.logit(baseline + log_OR)
p_death_DPL <- inv.logit(logit(p_death_UC) + log(OR_DPL))
p_death_LDPV <- inv.logit(logit(p_death_UC) + log(OR_LDPV))
p_death_DPL
p_death_LDPV
# Generating Outcomes
treatment_assigment <- sample(c("UC", "DPL", "LDPV"), 100, replace = TRUE)
treatment_assigment
# Generating Outcomes
treatment_assigment <- factor(sample(c("UC", "DPL", "LDPV"), 100, replace = TRUE))
treatment_assigment
# Generating Outcomes
treatment_assigment <- factor(sample(c("UC", "DPL", "LDPV"), 100, replace = TRUE),
levels = c("UC", "DPL", "LDPV"))
treatment_assigment
p_vec <- c(p_death_UC, p_death_DPL, p_death_LDPV)
p_ind <- p_vec[treatment_assigment]
p_ind
outcome <- rbinom(100, 1, p_ind)
outcome
for_analysis <- data.frame(outcome = outcome, TxARM = treatment_assigment)
for_analysis
library(brm)
model <- brms(outcome ~ TxARM, family = "binomial")
model <- brm(outcome ~ TxARM, family = "binomial")
?brm
?brms
library(brms)
model <- brm(outcome ~ TxARM, family = "binomial")
model <- brm(outcome ~ TxARM, data = for_analysis, family = "binomial")
library(INLA)
model <- brm(outcome ~ TxARM, data = for_analysis, family = "bernoulli")
?power.t.test
# PHQ-9
power.t.test(n = 539, delta = 5, sd = 6.0, sig.level = 0.05/3)
power.t.test(n = 390, delta = 5, sd = 6.0, sig.level = 0.05/3)
power.t.test(n = 390, delta = 1, sd = 1, sig.level = 0.05/3)
power.t.test(n = 390, delta = 2, sd = 5.49, sig.level = 0.05/3)
power.prop.test(p1 = 0.6, p2 = 0.71, power = 0.9)
390 / 0.8
390 / 0.8 *2
power.t.test(n = 390, delta = 2, sd = 4.7, sig.level = 0.05/3)
?p.adjust
pnorm(0, 0.67, 0.2)
## Parameters for the PSA distribution of the risk reduction of side effects
rr_side_effects_mu <- 0.68
pnorm(0, 0.68, 0.2)
pnorm(0, 0.7, 0.2)
# Lambda_home: Conditional probability that a patient recovers considering
# that they are not hospitalised
betapars <- betaPar(0.21, 0.03)
################################################################################
#### Analysis for the Chemotherapy Example
################################################################################
rm(list = ls())
set.seed(123)
### Load the Inputs
source("02_data/01_data_inputs.R")
setwd("~/Anna/SickKids/ConVOI/VOI Book/Chemotherapy_Book/04_analysis")
set.seed(123)
### Load the Inputs
source("02_data/01_data_inputs.R")
source("02_data/02_Assumption_Inputs.R")
